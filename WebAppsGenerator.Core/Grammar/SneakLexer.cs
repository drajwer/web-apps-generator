//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\drejerk\source\repos\WebAppsGenerator\WebAppsGenerator.Core\Grammar\SneakLexer.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace WebAppsGenerator.Core.Grammar {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class SneakLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, WS=3, CLASS=4, ID=5, COLON=6, TYPE=7, NEWLINE=8;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"WS", "CLASS", "INDENT", "ID", "COLON", "TYPE", "NEWLINE"
	};


	public SneakLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SneakLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'\t'", null, "' '", "'class'", null, "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "WS", "CLASS", "ID", "COLON", "TYPE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SneakLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SneakLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\n', ':', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x6', '\x5', '\x1F', '\n', 
		'\x5', '\r', '\x5', '\xE', '\x5', ' ', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\x32', '\n', '\a', '\x3', '\b', '\x5', 
		'\b', '\x35', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x39', 
		'\n', '\b', '\x2', '\x2', '\t', '\x3', '\x5', '\x5', '\x6', '\a', '\x3', 
		'\t', '\a', '\v', '\b', '\r', '\t', '\xF', '\n', '\x3', '\x2', '\x3', 
		'\x5', '\x2', '\x32', ';', '\x43', '\\', '\x63', '|', '\x2', '>', '\x2', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x3', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x5', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\a', '\x1B', '\x3', '\x2', '\x2', '\x2', '\t', '\x1E', '\x3', 
		'\x2', '\x2', '\x2', '\v', '\"', '\x3', '\x2', '\x2', '\x2', '\r', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\xF', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\x11', '\x12', '\a', '\"', '\x2', '\x2', '\x12', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x13', '\x14', '\b', '\x2', '\x2', '\x2', '\x14', '\x4', 
		'\x3', '\x2', '\x2', '\x2', '\x15', '\x16', '\a', '\x65', '\x2', '\x2', 
		'\x16', '\x17', '\a', 'n', '\x2', '\x2', '\x17', '\x18', '\a', '\x63', 
		'\x2', '\x2', '\x18', '\x19', '\a', 'u', '\x2', '\x2', '\x19', '\x1A', 
		'\a', 'u', '\x2', '\x2', '\x1A', '\x6', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x1C', '\a', '\v', '\x2', '\x2', '\x1C', '\b', '\x3', '\x2', '\x2', '\x2', 
		'\x1D', '\x1F', '\t', '\x2', '\x2', '\x2', '\x1E', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x1F', ' ', '\x3', '\x2', '\x2', '\x2', ' ', '\x1E', '\x3', 
		'\x2', '\x2', '\x2', ' ', '!', '\x3', '\x2', '\x2', '\x2', '!', '\n', 
		'\x3', '\x2', '\x2', '\x2', '\"', '#', '\a', '<', '\x2', '\x2', '#', '\f', 
		'\x3', '\x2', '\x2', '\x2', '$', '%', '\a', 'u', '\x2', '\x2', '%', '&', 
		'\a', 'v', '\x2', '\x2', '&', '\'', '\a', 't', '\x2', '\x2', '\'', '(', 
		'\a', 'k', '\x2', '\x2', '(', ')', '\a', 'p', '\x2', '\x2', ')', '\x32', 
		'\a', 'i', '\x2', '\x2', '*', '+', '\a', 'k', '\x2', '\x2', '+', ',', 
		'\a', 'p', '\x2', '\x2', ',', '\x32', '\a', 'v', '\x2', '\x2', '-', '.', 
		'\a', '\x64', '\x2', '\x2', '.', '/', '\a', 'q', '\x2', '\x2', '/', '\x30', 
		'\a', 'q', '\x2', '\x2', '\x30', '\x32', '\a', 'n', '\x2', '\x2', '\x31', 
		'$', '\x3', '\x2', '\x2', '\x2', '\x31', '*', '\x3', '\x2', '\x2', '\x2', 
		'\x31', '-', '\x3', '\x2', '\x2', '\x2', '\x32', '\xE', '\x3', '\x2', 
		'\x2', '\x2', '\x33', '\x35', '\a', '\xF', '\x2', '\x2', '\x34', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', '\x39', '\a', '\f', 
		'\x2', '\x2', '\x37', '\x39', '\a', '\xF', '\x2', '\x2', '\x38', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x39', '\x10', '\x3', '\x2', '\x2', '\x2', '\a', '\x2', ' ', '\x31', 
		'\x34', '\x38', '\x3', '\x2', '\x3', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace WebAppsGenerator.Core.Grammar
