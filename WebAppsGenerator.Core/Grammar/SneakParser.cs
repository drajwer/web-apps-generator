//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SneakParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class SneakParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, NEWLINE=3, WS=4, CLASS=5, COLON=6, HASH=7, COMMA=8, 
		OPEN_BRACKET=9, CLOSE_BRACKET=10, EQUALS=11, COMMENT=12, MULTILINE_COMM=13, 
		VALUE=14, ID=15, TYPE=16, PROP_WS=17;
	public const int
		RULE_compileUnit = 0, RULE_file = 1, RULE_classDefs = 2, RULE_classDef = 3, 
		RULE_body = 4, RULE_properties = 5, RULE_property = 6, RULE_annotations = 7, 
		RULE_annotation = 8, RULE_params = 9, RULE_paramlist = 10, RULE_param = 11;
	public static readonly string[] ruleNames = {
		"compileUnit", "file", "classDefs", "classDef", "body", "properties", 
		"property", "annotations", "annotation", "params", "paramlist", "param"
	};

	private static readonly string[] _LiteralNames = {
		null, "'INDENT'", "'DEDENT'", null, null, "'class'", "':'", "'#'", "','", 
		"'('", "')'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "NEWLINE", "WS", "CLASS", "COLON", "HASH", "COMMA", 
		"OPEN_BRACKET", "CLOSE_BRACKET", "EQUALS", "COMMENT", "MULTILINE_COMM", 
		"VALUE", "ID", "TYPE", "PROP_WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SneakParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SneakParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SneakParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SneakParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(SneakParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISneakParserVisitor<TResult> typedVisitor = visitor as ISneakParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileContext : ParserRuleContext {
		public ClassDefsContext classDefs() {
			return GetRuleContext<ClassDefsContext>(0);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISneakParserVisitor<TResult> typedVisitor = visitor as ISneakParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 2, RULE_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26; classDefs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefsContext : ParserRuleContext {
		public ClassDefContext classDef() {
			return GetRuleContext<ClassDefContext>(0);
		}
		public ClassDefsContext classDefs() {
			return GetRuleContext<ClassDefsContext>(0);
		}
		public ClassDefsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDefs; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISneakParserVisitor<TResult> typedVisitor = visitor as ISneakParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDefs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefsContext classDefs() {
		ClassDefsContext _localctx = new ClassDefsContext(Context, State);
		EnterRule(_localctx, 4, RULE_classDefs);
		try {
			State = 32;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLASS:
			case HASH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 28; classDef();
				State = 29; classDefs();
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefContext : ParserRuleContext {
		public AnnotationsContext annotations() {
			return GetRuleContext<AnnotationsContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(SneakParser.CLASS, 0); }
		public ITerminalNode ID() { return GetToken(SneakParser.ID, 0); }
		public ITerminalNode NEWLINE() { return GetToken(SneakParser.NEWLINE, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDef; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISneakParserVisitor<TResult> typedVisitor = visitor as ISneakParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefContext classDef() {
		ClassDefContext _localctx = new ClassDefContext(Context, State);
		EnterRule(_localctx, 6, RULE_classDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; annotations();
			State = 35; Match(CLASS);
			State = 36; Match(ID);
			State = 37; Match(NEWLINE);
			State = 38; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public ITerminalNode INDENT() { return GetToken(SneakParser.INDENT, 0); }
		public PropertiesContext properties() {
			return GetRuleContext<PropertiesContext>(0);
		}
		public ITerminalNode DEDENT() { return GetToken(SneakParser.DEDENT, 0); }
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISneakParserVisitor<TResult> typedVisitor = visitor as ISneakParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_body);
		try {
			State = 45;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 40; Match(INDENT);
				State = 41; properties();
				State = 42; Match(DEDENT);
				}
				break;
			case Eof:
			case CLASS:
			case HASH:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertiesContext : ParserRuleContext {
		public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(SneakParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(SneakParser.NEWLINE, i);
		}
		public PropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_properties; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISneakParserVisitor<TResult> typedVisitor = visitor as ISneakParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertiesContext properties() {
		PropertiesContext _localctx = new PropertiesContext(Context, State);
		EnterRule(_localctx, 10, RULE_properties);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 47; property();
					State = 48; Match(NEWLINE);
					}
					} 
				}
				State = 54;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 55; property();
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 56; Match(NEWLINE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		public AnnotationsContext annotations() {
			return GetRuleContext<AnnotationsContext>(0);
		}
		public ITerminalNode ID() { return GetToken(SneakParser.ID, 0); }
		public ITerminalNode COLON() { return GetToken(SneakParser.COLON, 0); }
		public ITerminalNode TYPE() { return GetToken(SneakParser.TYPE, 0); }
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISneakParserVisitor<TResult> typedVisitor = visitor as ISneakParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 12, RULE_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; annotations();
			State = 60; Match(ID);
			State = 61; Match(COLON);
			State = 62; Match(TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationsContext : ParserRuleContext {
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(SneakParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(SneakParser.NEWLINE, i);
		}
		public AnnotationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotations; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISneakParserVisitor<TResult> typedVisitor = visitor as ISneakParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationsContext annotations() {
		AnnotationsContext _localctx = new AnnotationsContext(Context, State);
		EnterRule(_localctx, 14, RULE_annotations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASH) {
				{
				{
				State = 64; annotation();
				State = 65; Match(NEWLINE);
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public ITerminalNode HASH() { return GetToken(SneakParser.HASH, 0); }
		public ITerminalNode ID() { return GetToken(SneakParser.ID, 0); }
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISneakParserVisitor<TResult> typedVisitor = visitor as ISneakParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 16, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(HASH);
			State = 73; Match(ID);
			State = 74; @params();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		public ParamlistContext paramlist() {
			return GetRuleContext<ParamlistContext>(0);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISneakParserVisitor<TResult> typedVisitor = visitor as ISneakParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 18, RULE_params);
		try {
			State = 81;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEWLINE:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 77; Match(OPEN_BRACKET);
				State = 78; paramlist();
				State = 79; Match(CLOSE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamlistContext : ParserRuleContext {
		public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SneakParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SneakParser.COMMA, i);
		}
		public ParamlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramlist; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISneakParserVisitor<TResult> typedVisitor = visitor as ISneakParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamlistContext paramlist() {
		ParamlistContext _localctx = new ParamlistContext(Context, State);
		EnterRule(_localctx, 20, RULE_paramlist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 83; param();
					State = 84; Match(COMMA);
					}
					} 
				}
				State = 90;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			State = 91; param();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SneakParser.ID, 0); }
		public ITerminalNode VALUE() { return GetToken(SneakParser.VALUE, 0); }
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISneakParserVisitor<TResult> typedVisitor = visitor as ISneakParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 22, RULE_param);
		try {
			State = 97;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 93; Match(ID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94; Match(ID);
				State = 95; Match(EQUALS);
				State = 96; Match(VALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x13', '\x66', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '#', '\n', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '\x30', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', 
		'\a', '\x35', '\n', '\a', '\f', '\a', '\xE', '\a', '\x38', '\v', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', '<', '\n', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\a', '\t', '\x46', '\n', '\t', '\f', '\t', '\xE', '\t', 
		'I', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'T', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', 'Y', 
		'\n', '\f', '\f', '\f', '\xE', '\f', '\\', '\v', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\x64', '\n', '\r', '\x3', '\r', '\x2', '\x2', '\xE', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x2', 
		'\x2', '\x2', '\x61', '\x2', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', '\x6', '\"', '\x3', '\x2', '\x2', 
		'\x2', '\b', '$', '\x3', '\x2', '\x2', '\x2', '\n', '/', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x36', '\x3', '\x2', '\x2', '\x2', '\xE', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x10', 'G', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'J', '\x3', '\x2', '\x2', '\x2', '\x14', 'S', '\x3', '\x2', '\x2', '\x2', 
		'\x16', 'Z', '\x3', '\x2', '\x2', '\x2', '\x18', '\x63', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x1B', '\a', '\x2', '\x2', '\x3', '\x1B', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\x5', '\x6', '\x4', '\x2', 
		'\x1D', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\x5', '\b', 
		'\x5', '\x2', '\x1F', ' ', '\x5', '\x6', '\x4', '\x2', ' ', '#', '\x3', 
		'\x2', '\x2', '\x2', '!', '#', '\x3', '\x2', '\x2', '\x2', '\"', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', '\"', '!', '\x3', '\x2', '\x2', '\x2', '#', 
		'\a', '\x3', '\x2', '\x2', '\x2', '$', '%', '\x5', '\x10', '\t', '\x2', 
		'%', '&', '\a', '\a', '\x2', '\x2', '&', '\'', '\a', '\x11', '\x2', '\x2', 
		'\'', '(', '\a', '\x5', '\x2', '\x2', '(', ')', '\x5', '\n', '\x6', '\x2', 
		')', '\t', '\x3', '\x2', '\x2', '\x2', '*', '+', '\a', '\x3', '\x2', '\x2', 
		'+', ',', '\x5', '\f', '\a', '\x2', ',', '-', '\a', '\x4', '\x2', '\x2', 
		'-', '\x30', '\x3', '\x2', '\x2', '\x2', '.', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '/', '*', '\x3', '\x2', '\x2', '\x2', '/', '.', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\v', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x5', 
		'\xE', '\b', '\x2', '\x32', '\x33', '\a', '\x5', '\x2', '\x2', '\x33', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x34', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x38', '\x3', '\x2', '\x2', '\x2', '\x36', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x37', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x38', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ';', '\x5', '\xE', '\b', '\x2', ':', '<', '\a', '\x5', 
		'\x2', '\x2', ';', ':', '\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', 
		'\x2', '\x2', '<', '\r', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x5', 
		'\x10', '\t', '\x2', '>', '?', '\a', '\x11', '\x2', '\x2', '?', '@', '\a', 
		'\b', '\x2', '\x2', '@', '\x41', '\a', '\x12', '\x2', '\x2', '\x41', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x5', '\x12', '\n', '\x2', 
		'\x43', '\x44', '\a', '\x5', '\x2', '\x2', '\x44', '\x46', '\x3', '\x2', 
		'\x2', '\x2', '\x45', '\x42', '\x3', '\x2', '\x2', '\x2', '\x46', 'I', 
		'\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', '\x2', '\x2', 'G', 
		'H', '\x3', '\x2', '\x2', '\x2', 'H', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'I', 'G', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\a', '\t', '\x2', '\x2', 
		'K', 'L', '\a', '\x11', '\x2', '\x2', 'L', 'M', '\x5', '\x14', '\v', '\x2', 
		'M', '\x13', '\x3', '\x2', '\x2', '\x2', 'N', 'T', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'P', '\a', '\v', '\x2', '\x2', 'P', 'Q', '\x5', '\x16', '\f', 
		'\x2', 'Q', 'R', '\a', '\f', '\x2', '\x2', 'R', 'T', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'N', '\x3', '\x2', '\x2', '\x2', 'S', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'T', '\x15', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x5', '\x18', 
		'\r', '\x2', 'V', 'W', '\a', '\n', '\x2', '\x2', 'W', 'Y', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'U', '\x3', '\x2', '\x2', '\x2', 'Y', '\\', '\x3', 
		'\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', 
		'\x2', '\x2', '\x2', '[', ']', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', 
		'\x3', '\x2', '\x2', '\x2', ']', '^', '\x5', '\x18', '\r', '\x2', '^', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '_', '\x64', '\a', '\x11', '\x2', 
		'\x2', '`', '\x61', '\a', '\x11', '\x2', '\x2', '\x61', '\x62', '\a', 
		'\r', '\x2', '\x2', '\x62', '\x64', '\a', '\x10', '\x2', '\x2', '\x63', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x63', '`', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x19', '\x3', '\x2', '\x2', '\x2', '\n', '\"', '/', '\x36', ';', 
		'G', 'S', 'Z', '\x63',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
