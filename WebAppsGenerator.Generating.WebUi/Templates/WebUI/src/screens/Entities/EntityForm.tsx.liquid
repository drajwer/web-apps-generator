import * as React from 'react';
import './{{Params.Entity.Name}}Form.css';
import { Grid, Typography, CircularProgress } from '@material-ui/core';
import {{Params.Entity.Name}}, { Create{{Params.Entity.Name}} } from 'src/models/{{Params.Entity.Name}}';
import { connect } from 'react-redux';
import { bindActionCreators, Dispatch } from 'redux';
import * as Actions from 'src/modules/{{Params.Entity.Name | DeCapitalize}}/actions';
import { IRootState } from 'src/modules';
import RouteComponentProps  from 'src/routing/RouteComponentProps';
import {{Params.Entity.Name}}FormComponent, { {{Params.Entity.Name}}ValidationErrors } from 'src/components/Forms/{{Params.Entity.Name}}/{{Params.Entity.Name}}Form';
import PageButtons from 'src/components/PageButtons/PageButtons';
import history from 'src/history';
import FormButtons from 'src/components/FormButtons/FormButtons';
import EntityPageTitle from 'src/components/EntityPageTitle/EntityPageTitle';

interface IProps extends RouteComponentProps {
	{{Params.Entity.Name | DeCapitalize}}: {{Params.Entity.Name }} | undefined
	isLoading: boolean
	isInvalid: boolean,
	addOrUpdateOrDeleteError: boolean,
	actions: any
}

interface IState {
    {{Params.Entity.Name | DeCapitalize}}: {{Params.Entity.Name}} | undefined
	editMode: boolean
	validationErrors: {{Params.Entity.Name}}ValidationErrors
}

class {{Params.Entity.Name}}Form extends React.Component<IProps, IState> {
	constructor(props: any) {
		super(props);
		let id = 0;
		if (this.props.match.params.id !== "new") {
			id = parseInt(this.props.match.params.id, 10);
		}
        this.state = { 
			{{Params.Entity.Name | DeCapitalize}}: this.props.{{Params.Entity.Name | DeCapitalize}},
			editMode: id === 0,
			validationErrors: new {{Params.Entity.Name}}ValidationErrors()
		};
    }

	public componentWillReceiveProps(props: IProps) {
		const {{Params.Entity.Name | DeCapitalize}} = this.state.{{Params.Entity.Name | DeCapitalize}};
		if ({{Params.Entity.Name | DeCapitalize}} == null || !this.state.editMode) {
			this.setState({ {{Params.Entity.Name | DeCapitalize}}: props.{{Params.Entity.Name | DeCapitalize}} });
		}
	}

	public componentWillMount() {
		if (this.props.match.params.id !== "new") {
			const {{Params.Entity.Name | DeCapitalize}} = this.props.{{Params.Entity.Name | DeCapitalize}};
			const id = parseInt(this.props.match.params.id, 10);
			if ({{Params.Entity.Name | DeCapitalize}} == null || !this.state.editMode) {
				this.props.actions.get{{Params.Entity.Name }}(id);
			}
		}
		else {
			this.setState({ {{Params.Entity.Name | DeCapitalize}}: Create{{Params.Entity.Name }}() })
		}
	}

    public render() {
		const newItem = this.props.match.params.id === 'new';
		const showDelete = !this.state.editMode;
		const showEdit = !this.state.editMode;

		if (this.props.isLoading) {
			return (<div className="loading-circle"><CircularProgress /></div>);
		}

		if(this.props.isInvalid) {
			return (
				<Typography variant="h4" className="error-message">
					{{Params.Entity.Name }} with id {this.props.match.params.id} does not exist.
				</Typography>
			);
		}
		if (this.state.{{Params.Entity.Name | DeCapitalize}} == null) {
			return (
				<Typography variant="h4" className="error-message">
					An error occured while fetching {{Params.Entity.Name | DeCapitalize }}.
				</Typography>
			);
		}
        return (
            <div>
				<Grid container={true} spacing={24}>
					<Grid item={true} sm={12}>
						<Grid container={true} spacing={24}>
							<Grid item={true} sm={6} xs={12}>
								<EntityPageTitle
									newItem={newItem}
									editMode={this.state.editMode}
									entityName="{{Params.Entity.Name | SplitCamelCase}}"
									id={ this.state.{{Params.Entity.Name | DeCapitalize}}.id.toString() }
								/>
							</Grid>
							<Grid item={true} sm={6} xs={12}>
								<PageButtons
									showDelete={showDelete}
									showEdit={showEdit}
									onDeleteClick={this.onDeleteClick}
									onEditClick={this.toggleMode}
									onBackClick={this.onBackClick}
								/>
							</Grid>
						</Grid>
					</Grid>
					<Grid item={true} sm={12}>
						<{{Params.Entity.Name}}FormComponent
							{{Params.Entity.Name | DeCapitalize}}={this.state.{{Params.Entity.Name | DeCapitalize}}}
							readonly={!this.state.editMode}
							on{{Params.Entity.Name}}Change={this.on{{Params.Entity.Name}}Change}
							onValidationErrorsChange={this.onValidationErrorsChange}
							validationErrors={this.state.validationErrors}
						/>
					</Grid>
					{this.state.editMode ?
						(
							<Grid item={true} sm={12}>
								<FormButtons
									onSaveClick={this.onSaveClick}
									onCancelClick={this.onCancelClick}
									saveDisabled={this.state.validationErrors.enabled && this.hasValidationErrors()}
								/>
							</Grid>
						)
						: ""
					}
				</Grid>
			</div>
        );
    }

	private on{{Params.Entity.Name}}Change = ({{Params.Entity.Name | DeCapitalize}}: {{Params.Entity.Name}}) => {
		if (this.state.{{Params.Entity.Name | DeCapitalize}} != null) {
			this.setState({ {{Params.Entity.Name | DeCapitalize}} });
		}
	}

	private onValidationErrorsChange = (validationErrors: {{Params.Entity.Name}}ValidationErrors) => {
		if (this.state.{{Params.Entity.Name | DeCapitalize}} != null) {
			this.setState({ validationErrors });
		}
	}

	private toggleMode = () => {
		if(this.state.editMode) {
			this.setState({validationErrors: new {{Params.Entity.Name}}ValidationErrors()});
		}
		this.setState({ editMode: !this.state.editMode });
	}

	private onSaveClick = () => {
		if (this.state.{{Params.Entity.Name | DeCapitalize}} == null) {
			throw new Error("Save could not be done for empty item.")
		}
		if(this.hasValidationErrors()) {
			const validationErrors = {...this.state.validationErrors, enabled: true};
			this.setState({validationErrors});
			return;
		}

		if (this.state.{{Params.Entity.Name | DeCapitalize}}.id === 0) {
			this.props.actions.add{{Params.Entity.Name }}(this.state.{{Params.Entity.Name | DeCapitalize}})
				.then(() => {
					this.toggleMode();
				})
				.catch(() => {return;});;
		}
		else {
			this.props.actions.update{{Params.Entity.Name }}(this.state.{{Params.Entity.Name | DeCapitalize}}.id, this.state.{{Params.Entity.Name | DeCapitalize}})
				.then(() => {
					this.toggleMode();
				})
				.catch(() => {return;});;
		}
	}

	private onDeleteClick = () => {
		if (this.state.{{Params.Entity.Name | DeCapitalize}} == null) {
			throw new Error("Delete could not be done for empty item.");
		}
		this.toggleMode();
		this.props.actions.delete{{Params.Entity.Name }}(this.state.{{Params.Entity.Name | DeCapitalize}}.id);
	}

	private onBackClick = () => {
		history.push('/{{Params.Entity.PluralName | DeCapitalize}}');
	}

	private onCancelClick = () => {
		if(this.props.match.params.id === 'new'){
			this.onBackClick();
		}
		else{
			this.toggleMode();
			this.setState({ {{Params.Entity.Name | DeCapitalize}}: this.props.{{Params.Entity.Name | DeCapitalize}}});
		}
	}

	private hasValidationErrors() : boolean {
		return Object.keys(this.state.validationErrors).filter(key => this.state.validationErrors[key] != null).length > 1;
	}
}
const mapStateToProps = (state: IRootState) => {
	return {
		{{Params.Entity.Name | DeCapitalize}}: state.{{Params.Entity.Name | DeCapitalize}}.{{Params.Entity.Name | DeCapitalize}},
		isLoading: state.{{Params.Entity.Name | DeCapitalize}}.isFetching,
		isInvalid: state.{{Params.Entity.Name | DeCapitalize}}.isInvalid,
		addOrUpdateOrDeleteError: state.{{Params.Entity.Name | DeCapitalize}}.addOrUpdateOrDeleteError,
	};
};

const mapDispatchToProps = (dispatch: Dispatch) => ({
	actions: bindActionCreators(Actions, dispatch),
});

export default connect(mapStateToProps, mapDispatchToProps)({{Params.Entity.Name}}Form);