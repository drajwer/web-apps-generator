import { GetAll, Post, Put, Delete } from '../../api/{{ Params.Entity.CamelCaseName }}Api';

import {
    RECEIVE_{{ Params.Entity.SnakeUppercasePluralName }}, REQUEST_{{ Params.Entity.SnakeUppercasePluralName }}, SET_FETCH_ERROR_{{ Params.Entity.SnakeUppercasePluralName }}, SELECT_{{ Params.Entity.SnakeUppercaseName}},
    REQUEST_ADD_{{ Params.Entity.SnakeUppercaseName}}, REQUEST_UPDATE_{{ Params.Entity.SnakeUppercaseName}}, REQUEST_DELETE_{{ Params.Entity.SnakeUppercaseName}},
    RESPONSE_ADD_{{ Params.Entity.SnakeUppercaseName}}, RESPONSE_UPDATE_{{ Params.Entity.SnakeUppercaseName}}, RESPONSE_DELETE_{{ Params.Entity.SnakeUppercaseName}},
    SET_ADD_{{ Params.Entity.SnakeUppercaseName}}_ERROR, SET_UPDATE_{{ Params.Entity.SnakeUppercaseName}}_ERROR, SET_DELETE_{{ Params.Entity.SnakeUppercaseName}}_ERROR
} from './actionTypes';

type IdType = number | string;

export const get{{ Params.Entity.PluralName }} = () => {
    return (dispatch: any, getState: any) => {
        dispatch(request{{ Params.Entity.PluralName }}());
        GetAll()
            .then(response => dispatch(receive{{ Params.Entity.PluralName }}(response)))
            .catch(() => dispatch(setFetchError()));
    }
}

export const add{{ Params.Entity.Name }} = ({{ Params.Entity.CamelCaseName }}: any) => {
    return (dispatch: any, getState: any) => {
        dispatch(requestAdd{{ Params.Entity.Name }}());
        Post({{ Params.Entity.CamelCaseName }})
            .then((response: any) => dispatch(responseAdd{{ Params.Entity.Name }}(response)))
            .catch(() => dispatch(setAdd{{ Params.Entity.Name }}Error()));
    };
};

export const update{{ Params.Entity.Name }} = (id: IdType, new{{ Params.Entity.Name }}: any) => {
    return (dispatch: any, getState: any) => {
        dispatch(requestUpdate{{ Params.Entity.Name }}());
        const {{ Params.Entity.CamelCasePluralName}} = getState().{{ Params.Entity.CamelCasePluralName}}.{{ Params.Entity.CamelCasePluralName}};
        const old{{ Params.Entity.Name }} = { ...{{ Params.Entity.CamelCasePluralName}}.find((c: any) => c.id === id) };
        old{{ Params.Entity.Name }}.name = new{{ Params.Entity.Name }}.name;
        Put(id, old{{ Params.Entity.Name }})
            .then(() => dispatch(responseUpdate{{ Params.Entity.Name }}(old{{ Params.Entity.Name }})))
            .catch(() => dispatch(setUpdate{{ Params.Entity.Name }}Error()));
    };
};

export const delete{{ Params.Entity.Name }} = (id: IdType) => {
    return (dispatch: any, getState: any) => {
        dispatch(requestDelete{{ Params.Entity.Name }}());
        Delete(id)
            .then(() => dispatch(responseDelete{{ Params.Entity.Name }}(id)))
            .catch(() => dispatch(setDelete{{ Params.Entity.Name }}Error()));
    };
};


export const select{{ Params.Entity.Name }} = (id: IdType) => ({
    type: SELECT_{{ Params.Entity.SnakeUppercaseName}},
    {{ Params.Entity.CamelCaseName }}Id: id,
});

const request{{ Params.Entity.PluralName }} = () => ({
    type: REQUEST_{{ Params.Entity.SnakeUppercasePluralName }},
});

const receive{{ Params.Entity.PluralName }} = ({{ Params.Entity.CamelCasePluralName}}: any) => ({
    type: RECEIVE_{{ Params.Entity.SnakeUppercasePluralName }},
    {{ Params.Entity.CamelCasePluralName}}
});

const setFetchError = () => ({
    type: SET_FETCH_ERROR_{{ Params.Entity.SnakeUppercasePluralName }},
});

const requestAdd{{ Params.Entity.Name }} = () => ({
    type: REQUEST_ADD_{{ Params.Entity.SnakeUppercaseName}},
});

const responseAdd{{ Params.Entity.Name }} = ({{ Params.Entity.CamelCaseName }}: any) => ({
    type: RESPONSE_ADD_{{ Params.Entity.SnakeUppercaseName}},
    {{ Params.Entity.CamelCaseName }}
});

const setAdd{{ Params.Entity.Name }}Error = () => ({
    type: SET_ADD_{{ Params.Entity.SnakeUppercaseName}}_ERROR
});

const requestUpdate{{ Params.Entity.Name }} = () => ({
    type: REQUEST_UPDATE_{{ Params.Entity.SnakeUppercaseName}},
});

const responseUpdate{{ Params.Entity.Name }} = ({{ Params.Entity.CamelCaseName }}: any) => ({
    type: RESPONSE_UPDATE_{{ Params.Entity.SnakeUppercaseName}},
    {{ Params.Entity.CamelCaseName }},
});

const setUpdate{{ Params.Entity.Name }}Error = () => ({
    type: SET_UPDATE_{{ Params.Entity.SnakeUppercaseName}}_ERROR
});

const requestDelete{{ Params.Entity.Name }} = () => ({
    type: REQUEST_DELETE_{{ Params.Entity.SnakeUppercaseName}},
});

const responseDelete{{ Params.Entity.Name }} = (id: IdType) => ({
    type: RESPONSE_DELETE_{{ Params.Entity.SnakeUppercaseName}},
    id
});

const setDelete{{ Params.Entity.Name }}Error = () => ({
    type: SET_DELETE_{{ Params.Entity.SnakeUppercaseName}}_ERROR
});
