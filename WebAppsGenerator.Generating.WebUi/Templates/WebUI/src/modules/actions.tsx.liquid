import { Get, GetAll, Post, Put, Delete } from '../../api/{{ Params.Entity.Name | DeCapitalize }}Api';
import { ThunkAction } from 'redux-thunk';
import { IRootState, RootActions } from '../index';
import { {{ Params.Entity.Name }}ActionTypes } from './actionTypes';
import { GetStateType } from '../index';
import {{ Params.Entity.Name }} from '../../models/{{ Params.Entity.Name }}';
import history from "src/history";

type ThunkResult<R> = ThunkAction<R, IRootState, undefined, RootActions>;

export type {{ Params.Entity.Name }}Actions =
	{ type: {{ Params.Entity.Name }}ActionTypes.REQUEST_{{ Params.Entity.Name | SnakeUppercase}} } |
	{ type: {{ Params.Entity.Name }}ActionTypes.RECEIVE_{{ Params.Entity.Name | SnakeUppercase}}, {{ Params.Entity.Name | DeCapitalize }}: {{ Params.Entity.Name }} } |
	{ type: {{ Params.Entity.Name }}ActionTypes.SET_FETCH_ERROR_{{ Params.Entity.Name | SnakeUppercase }} } |
	{ type: {{ Params.Entity.Name }}ActionTypes.INVALID_{{ Params.Entity.Name | SnakeUppercase }}_ID } |

	{ type: {{ Params.Entity.Name }}ActionTypes.REQUEST_{{ Params.Entity.PluralName | SnakeUppercase }} } |
	{ type: {{ Params.Entity.Name }}ActionTypes.RECEIVE_{{ Params.Entity.PluralName | SnakeUppercase }}, {{ Params.Entity.PluralName | DeCapitalize }}: {{ Params.Entity.Name }}[] } |
	{ type: {{ Params.Entity.Name }}ActionTypes.SET_FETCH_ERROR_{{ Params.Entity.PluralName | SnakeUppercase }} } |
			
	{ type: {{ Params.Entity.Name }}ActionTypes.REQUEST_ADD_{{ Params.Entity.Name | SnakeUppercase}} } |
	{ type: {{ Params.Entity.Name }}ActionTypes.RESPONSE_ADD_{{ Params.Entity.Name | SnakeUppercase}}, {{ Params.Entity.Name | DeCapitalize }}: {{ Params.Entity.Name }} } |
	{ type: {{ Params.Entity.Name }}ActionTypes.SET_ADD_{{ Params.Entity.Name | SnakeUppercase}}_ERROR } |
			
	{ type: {{ Params.Entity.Name }}ActionTypes.REQUEST_UPDATE_{{ Params.Entity.Name | SnakeUppercase}}, {{ Params.Entity.Name | DeCapitalize }}Id: {{Params.Entity.IdField.Type.Name}} } |
	{ type: {{ Params.Entity.Name }}ActionTypes.RESPONSE_UPDATE_{{ Params.Entity.Name | SnakeUppercase}}, {{ Params.Entity.Name | DeCapitalize }}: {{ Params.Entity.Name }} } |
	{ type: {{ Params.Entity.Name }}ActionTypes.SET_UPDATE_{{ Params.Entity.Name | SnakeUppercase}}_ERROR } |
			
	{ type: {{ Params.Entity.Name }}ActionTypes.REQUEST_DELETE_{{ Params.Entity.Name | SnakeUppercase}} } |
	{ type: {{ Params.Entity.Name }}ActionTypes.RESPONSE_DELETE_{{ Params.Entity.Name | SnakeUppercase}}, {{ Params.Entity.Name | DeCapitalize }}Id: {{Params.Entity.IdField.Type.Name}} } |
	{ type: {{ Params.Entity.Name }}ActionTypes.SET_DELETE_{{ Params.Entity.Name | SnakeUppercase}}_ERROR };


export const get{{ Params.Entity.PluralName }}: ThunkResult<void> = () => {
    return (dispatch: any, getState: GetStateType) => {
        dispatch(request{{ Params.Entity.PluralName }}());
        GetAll()
            .then(response => dispatch(receive{{ Params.Entity.PluralName }}(response)))
            .catch(() => dispatch(setFetchError{{ Params.Entity.PluralName }}()));
    }
}

export const get{{ Params.Entity.Name }}: (id: {{Params.Entity.IdField.Type.Name}}) => ThunkResult<void> = (id: {{Params.Entity.IdField.Type.Name}}) => {
    return (dispatch: any, getState: GetStateType) => {
        dispatch(request{{ Params.Entity.Name }}());
        Get(id)
            .then(response => dispatch(receive{{ Params.Entity.Name }}(response)))
            .catch((error: any) => {
				if(error.status === 404) {
                    dispatch(invalid{{ Params.Entity.Name }}Id());
                }
                else {
					dispatch(setFetchError{{ Params.Entity.Name }}());
				}
			});

    }
}

export const add{{ Params.Entity.Name }}: ({{ Params.Entity.Name | DeCapitalize }}: {{ Params.Entity.Name }}) => ThunkResult<void> = ({{ Params.Entity.Name | DeCapitalize }}: {{ Params.Entity.Name }}) => {
    return (dispatch: any, getState: GetStateType) => {
        return new Promise((resolve: any, reject: any) => {
			dispatch(requestAdd{{ Params.Entity.Name }}());
			Post({{ Params.Entity.Name | DeCapitalize }})
				.then((response: {{ Params.Entity.Name }}) => {
					history.replace(`/{{ Params.Entity.PluralName | DeCapitalize}}/${response.id}`);
					dispatch(responseAdd{{ Params.Entity.Name }}(response));
					resolve(response);
				})
				.catch(() => {
					dispatch(setAdd{{ Params.Entity.Name }}Error());
					reject();
				});
		});
    };
};

export const update{{ Params.Entity.Name }}: (id: {{Params.Entity.IdField.Type.Name}}, new{{ Params.Entity.Name }}: {{ Params.Entity.Name }}) => ThunkResult<void> = (id: {{Params.Entity.IdField.Type.Name}}, new{{ Params.Entity.Name }}: {{ Params.Entity.Name }}) => {
    return (dispatch: any, getState: GetStateType) => {
        return new Promise((resolve: any, reject: any) => {
			dispatch(requestUpdate{{ Params.Entity.Name }}(id));
			Put(id, new{{ Params.Entity.Name }})
				.then(() => {
					dispatch(responseUpdate{{ Params.Entity.Name }}(new{{ Params.Entity.Name }}));
					resolve();
				})
				.catch(() => {
					dispatch(setUpdate{{ Params.Entity.Name }}Error());
					reject();
				});
		});
    };
};

export const delete{{ Params.Entity.Name }}: (id: {{Params.Entity.IdField.Type.Name}}) => ThunkResult<void> = (id: {{Params.Entity.IdField.Type.Name}}) => {
    return (dispatch: any, getState: GetStateType) => {
        return new Promise((resolve: any, reject: any) => {
			dispatch(requestDelete{{ Params.Entity.Name }}());

			Delete(id)
				.then(() => {
					history.replace('/{{ Params.Entity.PluralName | DeCapitalize}}');
					dispatch(responseDelete{{ Params.Entity.Name }}(id));
					resolve();
				})
				.catch(() => {
					dispatch(setDelete{{ Params.Entity.Name }}Error());
					reject();
				});
		});
    };
};

const request{{ Params.Entity.Name }}: () => {{ Params.Entity.Name }}Actions = () => ({
    type: {{ Params.Entity.Name }}ActionTypes.REQUEST_{{ Params.Entity.Name | SnakeUppercase }},
});

const request{{ Params.Entity.PluralName }}: () => {{ Params.Entity.Name }}Actions = () => ({
    type: {{ Params.Entity.Name }}ActionTypes.REQUEST_{{ Params.Entity.PluralName | SnakeUppercase }},
});

const receive{{ Params.Entity.Name }}: ({{ Params.Entity.Name | DeCapitalize }}: {{ Params.Entity.Name }}) => {{ Params.Entity.Name }}Actions = ({{ Params.Entity.Name | DeCapitalize }}: {{ Params.Entity.Name }}) => ({
    type: {{ Params.Entity.Name }}ActionTypes.RECEIVE_{{ Params.Entity.Name | SnakeUppercase }},
    {{ Params.Entity.Name | DeCapitalize }}
});

const receive{{ Params.Entity.PluralName }}: ({{ Params.Entity.PluralName | DeCapitalize }}: {{ Params.Entity.Name }}[]) => {{ Params.Entity.Name }}Actions = ({{ Params.Entity.PluralName | DeCapitalize }}: {{ Params.Entity.Name }}[]) => ({
    type: {{ Params.Entity.Name }}ActionTypes.RECEIVE_{{ Params.Entity.PluralName | SnakeUppercase }},
    {{ Params.Entity.PluralName | DeCapitalize}}
});

const setFetchError{{ Params.Entity.Name }}: () => {{ Params.Entity.Name }}Actions = () => ({
    type: {{ Params.Entity.Name }}ActionTypes.SET_FETCH_ERROR_{{ Params.Entity.Name | SnakeUppercase }},
});

const setFetchError{{ Params.Entity.PluralName }}: () => {{ Params.Entity.Name }}Actions = () => ({
    type: {{ Params.Entity.Name }}ActionTypes.SET_FETCH_ERROR_{{ Params.Entity.PluralName | SnakeUppercase }},
});

const requestAdd{{ Params.Entity.Name }}: () => {{ Params.Entity.Name }}Actions = () => ({
    type: {{ Params.Entity.Name }}ActionTypes.REQUEST_ADD_{{ Params.Entity.Name | SnakeUppercase}},
});

const responseAdd{{ Params.Entity.Name }}: ({{ Params.Entity.Name | DeCapitalize }}: {{ Params.Entity.Name }}) => {{ Params.Entity.Name }}Actions = ({{ Params.Entity.Name | DeCapitalize }}: {{ Params.Entity.Name }}) => ({
    type: {{ Params.Entity.Name }}ActionTypes.RESPONSE_ADD_{{ Params.Entity.Name | SnakeUppercase}},
    {{ Params.Entity.Name | DeCapitalize }}
});

const setAdd{{ Params.Entity.Name }}Error: () => {{ Params.Entity.Name }}Actions = () => ({
    type: {{ Params.Entity.Name }}ActionTypes.SET_ADD_{{ Params.Entity.Name | SnakeUppercase}}_ERROR
});

const requestUpdate{{ Params.Entity.Name }}: (id: {{Params.Entity.IdField.Type.Name}}) => {{ Params.Entity.Name }}Actions = (id: {{Params.Entity.IdField.Type.Name}}) => ({
    type: {{ Params.Entity.Name }}ActionTypes.REQUEST_UPDATE_{{ Params.Entity.Name | SnakeUppercase}},
	{{Params.Entity.Name | DeCapitalize }}Id: id
});

const responseUpdate{{ Params.Entity.Name }}: ({{ Params.Entity.Name | DeCapitalize }}: {{ Params.Entity.Name }}) => {{ Params.Entity.Name }}Actions = ({{ Params.Entity.Name | DeCapitalize }}: {{ Params.Entity.Name }}) => ({
    type: {{ Params.Entity.Name }}ActionTypes.RESPONSE_UPDATE_{{ Params.Entity.Name | SnakeUppercase}},
    {{ Params.Entity.Name | DeCapitalize }},
});

const setUpdate{{ Params.Entity.Name }}Error: () => {{ Params.Entity.Name }}Actions = () => ({
    type: {{ Params.Entity.Name }}ActionTypes.SET_UPDATE_{{ Params.Entity.Name | SnakeUppercase}}_ERROR
});

const requestDelete{{ Params.Entity.Name }}: () => {{ Params.Entity.Name }}Actions = () => ({
    type: {{ Params.Entity.Name }}ActionTypes.REQUEST_DELETE_{{ Params.Entity.Name | SnakeUppercase}},
});

const responseDelete{{ Params.Entity.Name }}: (id: {{Params.Entity.IdField.Type.Name}}) => {{ Params.Entity.Name }}Actions = (id: {{Params.Entity.IdField.Type.Name}}) => ({
    type: {{ Params.Entity.Name }}ActionTypes.RESPONSE_DELETE_{{ Params.Entity.Name | SnakeUppercase}},
	{{ Params.Entity.Name | DeCapitalize }}Id : id
});

const setDelete{{ Params.Entity.Name }}Error: () => {{ Params.Entity.Name }}Actions = () => ({
    type: {{ Params.Entity.Name }}ActionTypes.SET_DELETE_{{ Params.Entity.Name | SnakeUppercase}}_ERROR
});

const invalid{{ Params.Entity.Name }}Id: () => {{ Params.Entity.Name }}Actions = () => ({
    type: {{ Params.Entity.Name }}ActionTypes.INVALID_{{ Params.Entity.Name | SnakeUppercase}}_ID
})