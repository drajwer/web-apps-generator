import { GetAll, Post, Put, Delete } from '../../api/{{ Params.Entity.Name | DeCapitalize }}Api';
import { ThunkAction } from 'redux-thunk';
import { IRootState, RootActions } from '../index';
import { {{ Params.Entity.Name }}ActionTypes } from './actionTypes';
import { GetStateType } from '../index';
import {{ Params.Entity.Name }} from '../../models/{{ Params.Entity.Name }}';

type ThunkResult<R> = ThunkAction<R, IRootState, undefined, RootActions>;

export type {{ Params.Entity.Name }}Actions =
	{ type: {{ Params.Entity.Name }}ActionTypes.SELECT_{{ Params.Entity.Name | SnakeUppercase}}, {{ Params.Entity.Name | DeCapitalize }}Id: number } |
	{ type: {{ Params.Entity.Name }}ActionTypes.REQUEST_{{ Params.Entity.PluralName | SnakeUppercase }} } |
	{ type: {{ Params.Entity.Name }}ActionTypes.RECEIVE_{{ Params.Entity.PluralName | SnakeUppercase }}, {{ Params.Entity.PluralName | DeCapitalize }}: {{ Params.Entity.Name }}[] } |
	{ type: {{ Params.Entity.Name }}ActionTypes.SET_FETCH_ERROR_{{ Params.Entity.PluralName | SnakeUppercase }} } |

	{ type: {{ Params.Entity.Name }}ActionTypes.REQUEST_ADD_{{ Params.Entity.Name | SnakeUppercase}} } |
	{ type: {{ Params.Entity.Name }}ActionTypes.RESPONSE_ADD_{{ Params.Entity.Name | SnakeUppercase}}, {{ Params.Entity.Name | DeCapitalize }}: {{ Params.Entity.Name }} } |
	{ type: {{ Params.Entity.Name }}ActionTypes.SET_ADD_{{ Params.Entity.Name | SnakeUppercase}}_ERROR } |

	{ type: {{ Params.Entity.Name }}ActionTypes.REQUEST_UPDATE_{{ Params.Entity.Name | SnakeUppercase}}, {{ Params.Entity.Name | DeCapitalize }}Id: number } |
	{ type: {{ Params.Entity.Name }}ActionTypes.RESPONSE_UPDATE_{{ Params.Entity.Name | SnakeUppercase}}, {{ Params.Entity.Name | DeCapitalize }}: {{ Params.Entity.Name }} } |
	{ type: {{ Params.Entity.Name }}ActionTypes.SET_UPDATE_{{ Params.Entity.Name | SnakeUppercase}}_ERROR } |

	{ type: {{ Params.Entity.Name }}ActionTypes.REQUEST_DELETE_{{ Params.Entity.Name | SnakeUppercase}} } |
	{ type: {{ Params.Entity.Name }}ActionTypes.RESPONSE_DELETE_{{ Params.Entity.Name | SnakeUppercase}}, {{ Params.Entity.Name | DeCapitalize }}Id: number } |
	{ type: {{ Params.Entity.Name }}ActionTypes.SET_DELETE_{{ Params.Entity.Name | SnakeUppercase}}_ERROR };


export const get{{ Params.Entity.PluralName }}: ThunkResult<void> = () => {
    return (dispatch: any, getState: GetStateType) => {
        dispatch(request{{ Params.Entity.PluralName }}());
        GetAll()
            .then(response => dispatch(receive{{ Params.Entity.PluralName }}(response)))
            .catch(() => dispatch(setFetchError()));
    }
}

export const add{{ Params.Entity.Name }}: ({{ Params.Entity.Name | DeCapitalize }}: {{ Params.Entity.Name }}) => ThunkResult<void> = ({{ Params.Entity.Name | DeCapitalize }}: {{ Params.Entity.Name }}) => {
    return (dispatch: any, getState: GetStateType) => {
        dispatch(requestAdd{{ Params.Entity.Name }}());
        Post({{ Params.Entity.Name | DeCapitalize }})
            .then((response: {{ Params.Entity.Name }}) => dispatch(responseAdd{{ Params.Entity.Name }}(response)))
            .catch(() => dispatch(setAdd{{ Params.Entity.Name }}Error()));
    };
};

export const update{{ Params.Entity.Name }}: (id: number, new{{ Params.Entity.Name }}: {{ Params.Entity.Name }}) => ThunkResult<void> = (id: number, new{{ Params.Entity.Name }}: {{ Params.Entity.Name }}) => {
    return (dispatch: any, getState: GetStateType) => {
        dispatch(requestUpdate{{ Params.Entity.Name }}());
        const {{ Params.Entity.PluralName | DeCapitalize}} = getState().{{ Params.Entity.Name | DeCapitalize }}.{{ Params.Entity.PluralName | DeCapitalize}};
        const old{{ Params.Entity.Name }} = {{ Params.Entity.PluralName | DeCapitalize}}.find(c => c.id === id);
        if (old{{ Params.Entity.Name }} === undefined) {
            dispatch(setUpdate{{ Params.Entity.Name }}Error());
            return;
        }
        
		Put(id, new{{ Params.Entity.Name }})
            .then(() => dispatch(responseUpdate{{ Params.Entity.Name }}(old{{ Params.Entity.Name }})))
            .catch(() => dispatch(setUpdate{{ Params.Entity.Name }}Error()));
    };
};

export const delete{{ Params.Entity.Name }}: (id: number) => ThunkResult<void> = (id: number) => {
    return (dispatch: any, getState: GetStateType) => {
        dispatch(requestDelete{{ Params.Entity.Name }}());
        Delete(id)
            .then(() => dispatch(responseDelete{{ Params.Entity.Name }}(id)))
            .catch(() => dispatch(setDelete{{ Params.Entity.Name }}Error()));
    };
};


export const select{{ Params.Entity.Name }} = (id: number) => ({
    type: {{ Params.Entity.Name }}ActionTypes.SELECT_{{ Params.Entity.Name | SnakeUppercase}},
    {{ Params.Entity.Name | DeCapitalize }}Id: id,
});

const request{{ Params.Entity.PluralName }} = () => ({
    type: {{ Params.Entity.Name }}ActionTypes.REQUEST_{{ Params.Entity.PluralName | SnakeUppercase }},
});

const receive{{ Params.Entity.PluralName }} = ({{ Params.Entity.PluralName | DeCapitalize}}: {{ Params.Entity.Name }}[]) => ({
    type: {{ Params.Entity.Name }}ActionTypes.RECEIVE_{{ Params.Entity.PluralName | SnakeUppercase }},
    {{ Params.Entity.PluralName | DeCapitalize}}
});

const setFetchError = () => ({
    type: {{ Params.Entity.Name }}ActionTypes.SET_FETCH_ERROR_{{ Params.Entity.PluralName | SnakeUppercase }},
});

const requestAdd{{ Params.Entity.Name }} = () => ({
    type: {{ Params.Entity.Name }}ActionTypes.REQUEST_ADD_{{ Params.Entity.Name | SnakeUppercase}},
});

const responseAdd{{ Params.Entity.Name }} = ({{ Params.Entity.Name | DeCapitalize }}: {{ Params.Entity.Name }}) => ({
    type: {{ Params.Entity.Name }}ActionTypes.RESPONSE_ADD_{{ Params.Entity.Name | SnakeUppercase}},
    {{ Params.Entity.Name | DeCapitalize }}
});

const setAdd{{ Params.Entity.Name }}Error = () => ({
    type: {{ Params.Entity.Name }}ActionTypes.SET_ADD_{{ Params.Entity.Name | SnakeUppercase}}_ERROR
});

const requestUpdate{{ Params.Entity.Name }} = () => ({
    type: {{ Params.Entity.Name }}ActionTypes.REQUEST_UPDATE_{{ Params.Entity.Name | SnakeUppercase}},
});

const responseUpdate{{ Params.Entity.Name }} = ({{ Params.Entity.Name | DeCapitalize }}: {{ Params.Entity.Name }}) => ({
    type: {{ Params.Entity.Name }}ActionTypes.RESPONSE_UPDATE_{{ Params.Entity.Name | SnakeUppercase}},
    {{ Params.Entity.Name | DeCapitalize }},
});

const setUpdate{{ Params.Entity.Name }}Error = () => ({
    type: {{ Params.Entity.Name }}ActionTypes.SET_UPDATE_{{ Params.Entity.Name | SnakeUppercase}}_ERROR
});

const requestDelete{{ Params.Entity.Name }} = () => ({
    type: {{ Params.Entity.Name }}ActionTypes.REQUEST_DELETE_{{ Params.Entity.Name | SnakeUppercase}},
});

const responseDelete{{ Params.Entity.Name }} = (id: number) => ({
    type: {{ Params.Entity.Name }}ActionTypes.RESPONSE_DELETE_{{ Params.Entity.Name | SnakeUppercase}},
    id
});

const setDelete{{ Params.Entity.Name }}Error = () => ({
    type: {{ Params.Entity.Name }}ActionTypes.SET_DELETE_{{ Params.Entity.Name | SnakeUppercase}}_ERROR
});
