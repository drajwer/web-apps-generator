import { combineReducers } from 'redux';
import { createStore, applyMiddleware } from 'redux';
import thunk, {ThunkMiddleware }  from 'redux-thunk';

{%- for entity in Params.Entities -%}
import {{ entity.Name | DeCapitalize }}, { I{{ entity.Name }}State } from './{{ entity.Name | DeCapitalize }}/reducer';
{%- endfor -%}

{%- for entity in Params.Entities -%}
import { {{ entity.Name }}Actions } from './{{ entity.Name | DeCapitalize }}/actions';
{%- endfor -%}

export type RootActions = 
{%- for entity in Params.Entities -%}
	{{ entity.Name }}Actions {% unless forloop.last %} | {% endunless %}
{%- endfor -%};

export interface IRootState {
{%- for entity in Params.Entities -%}
	{{ entity.Name | DeCapitalize }}: I{{ entity.Name }}State,
{%- endfor -%}
}

export type GetStateType = () => IRootState;

const rootReducer = combineReducers<IRootState, RootActions>({
{%- for entity in Params.Entities -%}
	{{ entity.Name | DeCapitalize }},
{%- endfor -%}
});

const store = createStore<IRootState, RootActions, {}, {}>(
	rootReducer,
	applyMiddleware(thunk as ThunkMiddleware<IRootState, RootActions>));

export default store;