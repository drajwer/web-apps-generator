import { Reducer } from 'redux';
import { {{ Params.Entity.Name }}ActionTypes } from './actionTypes';
import { {{ Params.Entity.Name }}Actions } from './actions';
import {{ Params.Entity.Name }} from '../../models/{{ Params.Entity.Name }}';


export interface I{{ Params.Entity.Name }}State {
    readonly isFetching: boolean,
    readonly isInvalid: boolean,
    readonly {{ Params.Entity.PluralName | DeCapitalize}}: {{ Params.Entity.Name }}[] | null,
    readonly {{ Params.Entity.Name | DeCapitalize }}: {{ Params.Entity.Name }} | undefined,
}

const initialState: I{{ Params.Entity.Name }}State = {
    isFetching: false,
    isInvalid: false,
    {{ Params.Entity.PluralName | DeCapitalize}}: null,
    {{ Params.Entity.Name | DeCapitalize }}: undefined,
};

const {{ Params.Entity.Name | DeCapitalize}}Reducer: Reducer<I{{ Params.Entity.Name }}State, {{ Params.Entity.Name }}Actions> = (state = initialState, action: {{ Params.Entity.Name }}Actions) => {
    switch (action.type) {
        case {{ Params.Entity.Name }}ActionTypes.REQUEST_UPDATE_{{ Params.Entity.Name | SnakeUppercase}}:
        case {{ Params.Entity.Name }}ActionTypes.REQUEST_DELETE_{{ Params.Entity.Name | SnakeUppercase}}:
        case {{ Params.Entity.Name }}ActionTypes.REQUEST_ADD_{{ Params.Entity.Name | SnakeUppercase}}:
        case {{ Params.Entity.Name }}ActionTypes.REQUEST_{{ Params.Entity.Name | SnakeUppercase }}:
        case {{ Params.Entity.Name }}ActionTypes.REQUEST_{{ Params.Entity.PluralName | SnakeUppercase }}:
            return {
                ...state,
                isFetching: true,
                isInvalid: false,
            };
        case {{ Params.Entity.Name }}ActionTypes.RESPONSE_UPDATE_{{ Params.Entity.Name | SnakeUppercase}}:
            return responseUpdate{{ Params.Entity.Name }}(state, action.{{ Params.Entity.Name | DeCapitalize }});
        case {{ Params.Entity.Name }}ActionTypes.RESPONSE_DELETE_{{ Params.Entity.Name | SnakeUppercase}}:
            return responseDelete{{ Params.Entity.Name }}(state, action.{{ Params.Entity.Name | DeCapitalize }}Id);
        case {{ Params.Entity.Name }}ActionTypes.RESPONSE_ADD_{{ Params.Entity.Name | SnakeUppercase}}:
            return responseAdd{{ Params.Entity.Name }}(state, action.{{ Params.Entity.Name | DeCapitalize }});
        case {{ Params.Entity.Name }}ActionTypes.RECEIVE_{{ Params.Entity.PluralName | SnakeUppercase }}:
            return {
                ...state,
                {{ Params.Entity.PluralName | DeCapitalize}}: action.{{ Params.Entity.PluralName | DeCapitalize}},
                isFetching: false
            };
		case {{ Params.Entity.Name }}ActionTypes.RECEIVE_{{ Params.Entity.Name | SnakeUppercase }}:
            return {
                ...state,
                {{ Params.Entity.Name | DeCapitalize}}: action.{{ Params.Entity.Name | DeCapitalize}},
                isFetching: false
            };
        case {{ Params.Entity.Name }}ActionTypes.SET_ADD_{{ Params.Entity.Name | SnakeUppercase}}_ERROR:
        case {{ Params.Entity.Name }}ActionTypes.SET_UPDATE_{{ Params.Entity.Name | SnakeUppercase}}_ERROR:
        case {{ Params.Entity.Name }}ActionTypes.SET_DELETE_{{ Params.Entity.Name | SnakeUppercase}}_ERROR:
		   return {
                ...state,
                isInvalid: true
            };
        case {{ Params.Entity.Name }}ActionTypes.SET_FETCH_ERROR_{{ Params.Entity.Name | SnakeUppercase }}:
        case {{ Params.Entity.Name }}ActionTypes.SET_FETCH_ERROR_{{ Params.Entity.PluralName | SnakeUppercase }}:
            return {
                ...state,
				isFetching: false,
				isInvalid: true
            };

        default:
            return state;
    }
}

const responseAdd{{ Params.Entity.Name }} = (state: I{{ Params.Entity.Name }}State, new{{ Params.Entity.Name }}: {{ Params.Entity.Name }}) => {
    const {{ Params.Entity.PluralName | DeCapitalize}} = state.{{ Params.Entity.PluralName | DeCapitalize}} || [];
	
	{{ Params.Entity.PluralName | DeCapitalize}}.push(new{{ Params.Entity.Name }});
	
	return {
        ...state,
        isFetching: false,
        showToast: true,
        {{ Params.Entity.PluralName | DeCapitalize}},
		{{ Params.Entity.Name | DeCapitalize}} : new{{ Params.Entity.Name }}
    };
};

const responseDelete{{ Params.Entity.Name }} = (state: I{{ Params.Entity.Name }}State, id: number) => {
    const {{ Params.Entity.PluralName | DeCapitalize}} = state.{{ Params.Entity.PluralName | DeCapitalize}};
	if ({{ Params.Entity.PluralName | DeCapitalize}} != null) {
		const toDel = {{ Params.Entity.PluralName | DeCapitalize}}.find(c => c.id === id);
		if(toDel != null) {
			const index = {{ Params.Entity.PluralName | DeCapitalize}}.indexOf(toDel);
			{{ Params.Entity.PluralName | DeCapitalize}}.splice(index, 1);
		}
	}

    return {
        ...state,
        isFetching: false,
        showToast: true,
        {{ Params.Entity.PluralName | DeCapitalize}},
		{{ Params.Entity.Name | DeCapitalize}} : undefined
    };
};

const responseUpdate{{ Params.Entity.Name }} = (state: I{{ Params.Entity.Name }}State, new{{ Params.Entity.Name }}: {{ Params.Entity.Name }}) => {
    const {{ Params.Entity.PluralName | DeCapitalize}} = state.{{ Params.Entity.PluralName | DeCapitalize}};
	if ({{ Params.Entity.PluralName | DeCapitalize}} != null) {
		const old{{ Params.Entity.Name }} = {{ Params.Entity.PluralName | DeCapitalize}}.find(c => c.id === new{{ Params.Entity.Name }}.id);
		if(old{{ Params.Entity.Name }} != null) {
		    const index = {{ Params.Entity.PluralName | DeCapitalize}}.indexOf(old{{ Params.Entity.Name }});
			{{ Params.Entity.PluralName | DeCapitalize}}[index] = new{{ Params.Entity.Name }};
		}
		else{
			{{ Params.Entity.PluralName | DeCapitalize}}.push(new{{ Params.Entity.Name }});
		}
	}

    return {
        ...state,
        isFetching: false,
        showToast: true,
        {{ Params.Entity.PluralName | DeCapitalize}},
		{{ Params.Entity.Name | DeCapitalize}} : new{{ Params.Entity.Name }}
    };
};

export default {{ Params.Entity.Name | DeCapitalize}}Reducer;