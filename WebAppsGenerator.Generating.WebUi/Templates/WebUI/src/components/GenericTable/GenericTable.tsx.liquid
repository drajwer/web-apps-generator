import * as React from 'react';
import { withStyles } from '@material-ui/core/styles';
import { Table, TableBody, TableCell, TablePagination, TableRow, Paper, Checkbox } from '@material-ui/core';
import CustomTableHead, { IRowDescription } from '../CustomTableHead/CustomTableHead';
import TableToolbar from '../TableToolbar/TableToolbar';

function stableSort(array: any, cmp: any) {
    const stabilizedThis = array.map((el: any, index: number) => [el, index]);
    stabilizedThis.sort((a: any, b: any) => {
        const order = cmp(a[0], b[0]);
        if (order !== 0) { return order; }
        return a[1] - b[1];
    });
    return stabilizedThis.map((el: any) => el[0]);
}

interface IGenericTableProps {
    data: any,
    selected: number[],
    tableTitle: string,
    tableHeadLabels: string[],
    classes: any,
    showCheckboxes: boolean,
    multipleSelects: boolean,
	onSelect? : (selected: number[]) => void;
};

interface IGenericTableState {
    order: "asc" | "desc" | undefined,
    orderBy: string,
    selected: number[],
    page: number,
    rowsPerPage: number,
};

class GenericTable extends React.Component<IGenericTableProps, IGenericTableState> {

    constructor(props: IGenericTableProps) {
        super(props);
        this.state = {
            order: 'desc',
            orderBy: 'isSelected',
            selected: props.selected,
            page: 0,
            rowsPerPage: 5,
        };
    };

    public handleRequestSort = (event: any, property: any) => {
        const orderBy = property;
        let order: "asc" | "desc" | undefined = 'desc';

        if (this.state.orderBy === property && this.state.order === 'desc') {
            order = 'asc';
        }

        this.setState({ order, orderBy });
    };

    public handleSelectAllClick = (event: any) => {
        if (event.target.checked) {
            this.setState({ selected: this.props.data.map((n: any) => n.id) });
            return;
        }
        this.setState({ selected: [] });
    };

    public handleClick = (event: any, id: number) => {
        const { selected } = this.state;
        const selectedIndex = selected.indexOf(id);
        let newSelected: number[] = [];

        if (!this.props.multipleSelects) {
            if (selectedIndex === -1) {
                newSelected = [id];
            }
        } else if (selectedIndex === -1) {
            newSelected = newSelected.concat(selected, id);
        } else if (selectedIndex === 0) {
            newSelected = newSelected.concat(selected.slice(1));
        } else if (selectedIndex === selected.length - 1) {
            newSelected = newSelected.concat(selected.slice(0, -1));
        } else if (selectedIndex > 0) {
            newSelected = newSelected.concat(
                selected.slice(0, selectedIndex),
                selected.slice(selectedIndex + 1),
            );
        }

		if(this.props.onSelect != null){
            this.props.onSelect(newSelected);
        }
        this.setState({ selected: newSelected });
    };

    public handleChangePage = (event: any, page: number) => {
        this.setState({ page });
    };

    public handleChangeRowsPerPage = (event: any) => {
        this.setState({ rowsPerPage: event.target.value });
    };

    public isSelected = (id: number) => this.state.selected.indexOf(id) !== -1;

    public desc = (a: any, b: any, orderBy: any) => {
        let valueA;
        let valueB;
        if (orderBy === 'isSelected') {
            valueA = this.isSelected(a.id);
            valueB = this.isSelected(b.id);
        }
        else {
            valueA = a[orderBy];
            valueB = b[orderBy];
        }
        if (valueB < valueA) {
            return -1;
        }
        if (valueB > valueA) {
            return 1;
        }
        return 0;
    }

    public getSorting = (order: "asc" | "desc" | undefined, orderBy: any) => {
        return order === 'desc' ? (a: any, b: any) => this.desc(a, b, orderBy) : (a: any, b: any) => -this.desc(a, b, orderBy);
    }

    public render() {
        const { data, classes, showCheckboxes, multipleSelects, tableTitle, tableHeadLabels } = this.props;
        const { order, orderBy, selected, rowsPerPage, page } = this.state;
        const emptyRows = rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);
        const rows: IRowDescription[] =
            tableHeadLabels.map((key: any, index: number) => ({
                id: key,
                disablePadding: false,
                label: key
            }));

        return (
            <Paper className={classes.root}>
                <TableToolbar numSelected={selected.length} tableTitle={tableTitle} />
                <div className={classes.tableWrapper}>
                    <Table className={classes.table} aria-labelledby="tableTitle">
                        <CustomTableHead
                            numSelected={selected.length}
                            order={order}
                            orderBy={orderBy}
                            onSelectAllClick={this.handleSelectAllClick}
                            onRequestSort={this.handleRequestSort}
                            rowCount={this.props.data.length}
                            rows={rows}
                            showCheckboxes={showCheckboxes}
                            multipleSelects={multipleSelects}
                        />
                        <TableBody>
                            {stableSort(this.props.data, this.getSorting(order, orderBy))
                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                                .map((n: any, elementIndex: number) => {
                                    const isSelected = this.isSelected(n.id);
                                    return (
                                        <TableRow
                                            hover={true}
                                            onClick={event => this.handleClick(event, n.id)}
                                            role={showCheckboxes ? "checkbox" : ""}
                                            aria-checked={isSelected}
                                            tabIndex={-1}
                                            key={elementIndex}
                                            selected={isSelected}
                                        >
                                            {showCheckboxes ?
                                                (<TableCell padding="checkbox" key={elementIndex}>
                                                    <Checkbox checked={isSelected} />
                                                </TableCell>)
                                                :
                                                ''}
                                            {
                                                Object.keys(n).map((value: string, index: number) => {
                                                    if (index === 0) {
                                                        return (
                                                            <TableCell
                                                                component="th"
                                                                scope="row"
                                                                padding={"dense"}
                                                                key={index} >
                                                                {n[value]}
                                                            </TableCell>
                                                        );
                                                    }
                                                    return (
                                                        <TableCell align="left" padding="dense" key={index}>
                                                            {n[value]}
                                                        </TableCell>
                                                    );
                                                })
                                            }
                                        </TableRow>
                                    );
                                })}
                            {emptyRows > 0 && (
                                <TableRow style={% raw %}{{ height: 49 * emptyRows }}{% endraw %}>
                                    <TableCell colSpan={6} />
                                </TableRow>
                            )}
                        </TableBody>
                    </Table>
                </div>
                <TablePagination
                    rowsPerPageOptions={[5, 10, 25]}
                    component="div"
                    count={data.length}
                    rowsPerPage={rowsPerPage}
                    page={page}
                    backIconButtonProps={% raw %}{{
                        'aria-label': 'Previous Page',
                    }}{% endraw %}
                    nextIconButtonProps={% raw %}{{
                        'aria-label': 'Next Page',
                    }}{% endraw %}

                    onChangePage={this.handleChangePage}
                    onChangeRowsPerPage={this.handleChangeRowsPerPage}
                />
            </Paper>
        );
    }
}

const styles = (theme: any) => ({
    root: {
        width: '100%',
        marginTop: theme.spacing.unit * 3,
    },
    table: {
        minWidth: 1020,
    },
    tableWrapper: {
        overflow: 'auto',
    },
});

export default (withStyles(styles)(GenericTable));