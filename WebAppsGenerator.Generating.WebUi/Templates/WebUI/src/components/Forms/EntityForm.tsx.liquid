import * as React from 'react';
import { Grid } from '@material-ui/core';
{%- for field in Params.Entity.Fields -%}
	{%- unless field.Name == 'id' -%}
		{%- unless field.Type.Name == 'boolean' -%}
import { TextField } from '@material-ui/core';
			{%- break -%}
		{%- endunless -%}
	{%- endunless -%}
{%- endfor -%}
{%- for field in Params.Entity.Fields -%}
	{%- if field.Type.Name == 'boolean' -%}
		{%- unless field.Type.IsNullable -%}
import { FormControlLabel, Checkbox } from '@material-ui/core';
		{%- break -%}
		{%- endunless -%}
	{%- endif -%}
{%- endfor -%}
{%- for field in Params.Entity.Fields -%}
	{%- if field.Type.Name == 'boolean' -%}
		{%- if field.Type.IsNullable -%}
import { MenuItem } from '@material-ui/core';
		{%- break -%}
		{%- endif -%}
	{%- endif -%}
{%- endfor -%}
{%- for field in Params.Entity.Fields -%}
	{%- if field.Type.Name == 'Date' -%}
import { DateTimePicker } from 'material-ui-pickers';
		{%- break -%}
	{%- endif -%}
{%- endfor -%}
{%- for field in Params.Entity.Fields -%}
	{%- if field.Relation.HasOne or field.Relation.HasMany -%}
import {{ field.Type.EntityName }}Modal from 'src/components/Modals/{{ field.Type.EntityName }}/{{ field.Type.EntityName }}Modal';
	{%- endif -%}
{%- endfor -%}
import { IProps, IState } from './{{Params.Entity.Name}}FormData';
export { {{Params.Entity.Name}}ValidationErrors } from './{{Params.Entity.Name}}FormData';
{%- assign renderValidateAll = false -%}
{%- for field in Params.Entity.Fields -%}
	{%- if field.Type.IsSimpleType -%}
		{%- unless field.Name == 'id' -%}
			{%- assign renderValidateAll = true -%}
		{%- endunless -%}
	{%- endif -%}
{%- endfor -%}
{%- if renderValidateAll -%}
import { {{Params.Entity.Name}}ValidationErrors } from './{{Params.Entity.Name}}FormData';
{%- endif -%}

{%- assign createState = false -%}
{%- for field in Params.Entity.Fields -%}
		{%- if field.Relation.HasOne or field.Relation.HasMany -%}
			{%- assign createState = true -%}
		{%- endif -%}
{%- endfor -%}
class {{Params.Entity.Name}}Form extends React.Component<IProps, {%- if createState -%}IState{%-else-%}{}{%-endif -%}> {
	constructor(props: IProps) {
		super(props);
		this.state = { 
{%- for field in Params.Entity.Fields -%}
	{%- if field.Relation.HasOne or field.Relation.HasMany -%}
			open{{field.Name}}Modal: false,
	{%- endif -%}
{%- endfor -%}
		};
	}
{%- if renderValidateAll -%}

	public componentWillMount() {
		this.validateAllFields();
	}
{%- endif -%}

    public render() {
        return (
            <Grid container={true} spacing={24}>
			{%- for field in Params.Entity.Fields -%}
				{%- if field.Relation.HasOne or field.Relation.HasMany -%}
				<{{ field.Type.EntityName }}Modal
					{%- if field.Relation.HasMany -%}
					multiple = {true}
						{%- else -%}
					multiple = {false}
					{%- endif -%}
					open={this.state.open{{ field.Name }}Modal}
					onClose={this.toggle{{ field.Name }}Modal}
					onSave={this.on{{ field.Name }}Change}
					{%- if field.Relation.HasMany -%}
					selected = {this.props.{{Params.Entity.Name | DeCapitalize}}.{{field.Name}}Ids}
						{%- else -%}
					selected = { this.props.{{Params.Entity.Name | DeCapitalize}}.{{field.Name}}Id != null ? [this.props.{{Params.Entity.Name | DeCapitalize}}.{{field.Name}}Id] : [] }
					{%- endif -%}
				/>
				{%- endif -%}
			{%- endfor -%}
			{%- assign addPlaceholder = true -%}
			{%- for field in Params.Entity.Fields -%}
				{%- unless field.Name == 'id' -%}
				{%- assign addPlaceholder = false -%}
				<Grid item={true} xs={12} sm={4}>
					{%- if field.Type.IsSimpleType -%}
						{%- if field.Type.Name == 'boolean' -%}
							{%- if field.Type.IsNullable -%}
							<TextField
								id="{{ field.Name }}"
								label="{{field.Name | SplitCamelCase | Capitalize}}"
								select={true}
								required={false}
								value={this.props.{{Params.Entity.Name | DeCapitalize }}.{{ field.Name | DeCapitalize }} == null ? "" : this.props.{{Params.Entity.Name | DeCapitalize }}.{{ field.Name | DeCapitalize }}.toString()}
								onChange={this.on{{ field.Name }}Change}
								disabled={this.props.readonly}
								fullWidth={true}
								error={this.props.validationErrors.enabled && this.props.validationErrors.{{field.Name}}Error != null}
								helperText={this.props.validationErrors.enabled ? this.props.validationErrors.{{field.Name}}Error : ""}
							>
								<MenuItem key={"undefined"} value={""}>
									None
								</MenuItem>
								<MenuItem key={"true"} value={"true"}>
									True
								</MenuItem>
								<MenuItem key={"false"} value={"false"}>
									False
								</MenuItem>
							</TextField>
							{%- else -%}
							<FormControlLabel
								label="{{ field.Name | SplitCamelCase | Capitalize }}"
								control={
									<Checkbox
										id="{{ field.Name | DeCapitalize }}"
										checked={this.props.{{Params.Entity.Name | DeCapitalize }}.{{ field.Name | DeCapitalize }} == null ? false : this.props.{{Params.Entity.Name | DeCapitalize }}.{{ field.Name | DeCapitalize }}}
										onChange={this.on{{ field.Name }}Change}
										color="primary"
										disabled={this.props.readonly}
									/>
								}
							/>
							{%- endif -%}
						{%- elsif field.Type.Name == 'Date' -%}
					<DateTimePicker
						id="{{field.Name}}"
						name="{{field.Name | SplitCamelCase | Capitalize}}"
						label="{{field.Name | SplitCamelCase | Capitalize}}"
						value={this.props.{{Params.Entity.Name | DeCapitalize}}.{{field.Name}} == null ? null : this.props.{{Params.Entity.Name | DeCapitalize}}.{{field.Name}}}
						onChange={this.on{{field.Name}}Change}
						showTodayButton={true}
						{%- if field.Type.IsNullable -%}
						clearable={true}
						required={false}
						{%-else-%}
						clearable={false}
						required={true}
						{%-endif-%}
						fullWidth={true}
						disabled={this.props.readonly}
						error={this.props.validationErrors.enabled && this.props.validationErrors.{{field.Name}}Error != null}
						helperText={this.props.validationErrors.enabled ? this.props.validationErrors.{{field.Name}}Error : ""}
					/>
						{%- else -%}
					<TextField
					{%- if field.Type.IsNullable -%}
					  required={false}
					{%-else-%}
					  required={true}
					{%-endif-%}
					  id="{{field.Name}}"
					  name="{{field.Name | SplitCamelCase | Capitalize}}"
					  label="{{field.Name | SplitCamelCase | Capitalize}}"
						{%- if field.Type.Name == 'number' -%}
					  type="{{ field.Type.Name }}"
						{%- endif -%}
					  fullWidth={true}
						{%- if field.Type.Name == 'number' -%}
					  value = { this.props.{{Params.Entity.Name | DeCapitalize}}.{{field.Name}} == null || isNaN(this.props.{{Params.Entity.Name | DeCapitalize}}.{{field.Name}}) ? "" : this.props.{{Params.Entity.Name | DeCapitalize}}.{{field.Name}} }
						{%- else -%}
					  value = { this.props.{{Params.Entity.Name | DeCapitalize}}.{{field.Name}} == null ? "" : this.props.{{Params.Entity.Name | DeCapitalize}}.{{field.Name}} }
						{%- endif -%}
					  disabled={this.props.readonly}
					  onChange={this.on{{ field.Name }}Change}
					  error={this.props.validationErrors.enabled && this.props.validationErrors.{{field.Name}}Error != null}
					  helperText={this.props.validationErrors.enabled ? this.props.validationErrors.{{field.Name}}Error : ""}
					/>
						{%- endif -%}
					{%- else -%}
					<TextField
					  required={true}
					  id="{{field.Name}}"
					  name="{{field.Name | SplitCamelCase | Capitalize}}"
					  label="{{field.Name | SplitCamelCase | Capitalize}}"
					  type="string"
					  fullWidth={true}
						{%- if field.Relation.HasMany -%}
					  value = {`${this.props.{{Params.Entity.Name | DeCapitalize}}.{{field.Name}}Ids.length} selected`}
						{%- else -%}
					  value = { this.props.{{Params.Entity.Name | DeCapitalize}}.{{field.Name}}Id == null ? 'Empty' : 'Item selected' }
						{%- endif -%}
					  disabled={this.props.readonly}
					  onClick={this.toggle{{field.Name}}Modal}
					/>
					{%- endif -%}
				</Grid>
				{%- endunless -%}
			{%- endfor -%}
			{%- if addPlaceholder -%}
			<div>This form is empty. Please check the input file.</div>
			{%- endif -%}
            </Grid>
        )
    }
	{%- for field in Params.Entity.Fields -%}
		{%- if field.Type.IsSimpleType -%}
			{%- unless field.Name == 'id' -%}
				{%- if field.Type.Name == 'Date' -%}
	private on{{field.Name}}Change = (date: Date {% if field.Type.IsNullable -%}| null {%-endif-%}) => { 
				{%- else -%}
	private on{{field.Name}}Change = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
				{%- endif -%}
		const {{Params.Entity.Name | DeCapitalize}} = {...this.props.{{Params.Entity.Name | DeCapitalize}}};
	{%- if field.Type.IsNullable -%}
		{%- if field.Type.Name == 'Date' -%}
		if (date == null) { 
		{%- else -%}
		if(e.target.value === "") {
		{%- endif -%}
			{{Params.Entity.Name | DeCapitalize}}.{{field.Name}} = undefined;
			this.props.on{{Params.Entity.Name}}Change({{Params.Entity.Name | DeCapitalize}});
			this.validate{{field.Name | Capitalize}}({{Params.Entity.Name | DeCapitalize}}.{{field.Name}});
			return;
		}
	{%- endif -%}
		{%- if field.Type.Name == 'number' -%}
		{{Params.Entity.Name | DeCapitalize}}.{{field.Name}} = {%if field.Type.IsFloat -%}parseFloat(e.target.value){%-else-%}parseInt(e.target.value, 10){%-endif-%};
		{%- elsif field.Type.Name == 'boolean' -%}
			{%- if field.Type.IsNullable -%}
		{{Params.Entity.Name | DeCapitalize}}.{{field.Name}} = e.target.value === "true";
			{%- else -%}
		{{Params.Entity.Name | DeCapitalize}}.{{field.Name}} = !{{Params.Entity.Name | DeCapitalize}}.{{field.Name}};
			{%- endif -%}
		{%- elsif field.Type.Name == 'Date' -%}	
		{{Params.Entity.Name | DeCapitalize}}.{{field.Name}} = date;
		{%- else -%}
		{{Params.Entity.Name | DeCapitalize}}.{{field.Name}} = e.target.value;
		{%- endif -%}
		this.props.on{{Params.Entity.Name}}Change({{Params.Entity.Name | DeCapitalize}});
		this.validate{{field.Name | Capitalize}}({{Params.Entity.Name | DeCapitalize}}.{{field.Name}});
    }

			{%- endunless -%}
		{%- else -%}

	private toggle{{ field.Name }}Modal = () => {
		if (!this.props.readonly) {
			this.setState({ open{{ field.Name }}Modal: !this.state.open{{ field.Name }}Modal });
		}
	}

	private on{{ field.Name }}Change = (selected: number[]) => {
		const {{Params.Entity.Name | DeCapitalize}} = {...this.props.{{Params.Entity.Name | DeCapitalize}}};
		{%- if field.Relation.HasMany -%}
		{{Params.Entity.Name | DeCapitalize}}.{{ field.Name }}Ids = selected;
		{%- else -%}
		{{Params.Entity.Name | DeCapitalize}}.{{ field.Name }}Id = selected.length > 0 ? selected[0] : undefined;
		{%- endif -%}
		this.props.on{{Params.Entity.Name}}Change({{Params.Entity.Name | DeCapitalize}});
	}
		{%- endif -%}
	{%- endfor -%}

{%- if renderValidateAll -%}
	private validateAllFields() {
		const validationErrors = { ...this.props.validationErrors };

	{%- for field in Params.Entity.Fields -%}
		{%- if field.Type.IsSimpleType -%}
			{%- unless field.Name == 'id' -%}
		this.add{{field.Name | Capitalize}}ValidationErrors(validationErrors, this.props.{{Params.Entity.Name | DeCapitalize}}.{{field.Name}});
			{%- endunless -%}
		{%- endif -%}
	{%- endfor -%}
		this.props.onValidationErrorsChange(validationErrors);
	}
{%- endif -%}


	{%- for field in Params.Entity.Fields -%}
		{%- if field.Type.IsSimpleType -%}
			{%- unless field.Name == 'id' -%}
	private validate{{field.Name | Capitalize}}({{field.Name}}?: {{field.Type.Name}}) {
		const validationErrors = { ...this.props.validationErrors };
		const noErrors = this.add{{field.Name | Capitalize}}ValidationErrors(validationErrors, {{field.Name}});

		if(!noErrors ) {
			this.props.onValidationErrorsChange(validationErrors);
		}
		else if (validationErrors.{{field.Name}}Error != null) {
			validationErrors.{{field.Name}}Error = undefined;
			this.props.onValidationErrorsChange(validationErrors);
		}
	}

	private add{{field.Name | Capitalize}}ValidationErrors(validationErrors : {{Params.Entity.Name}}ValidationErrors, {{field.Name}}?: {{field.Type.Name}}) : boolean {
				{%- unless field.Type.IsNullable -%}
					{%- if field.Type.Name == "number" -%}
		if ({{field.Name}} == null || isNaN({{field.Name}})) {
			validationErrors.{{field.Name}}Error = "{{field.Name | Capitalize}} should be a valid number";
			return false;
		}
					{%- else -%}
						{%- if field.Type.Name == "string" -%}
		if ({{field.Name}} == null || {{field.Name}} === "") {
						{%- else -%}
		if ({{field.Name}} == null) {
						{%- endif -%}
			validationErrors.{{field.Name}}Error = "This field is required.";
			return false;
		}
					{%- endif -%}
				{%- else -%}
		if ({{field.Name}} == null) {
			return true;
		}
				{%- endunless -%}
				{%- unless field.ValueRange == nil -%}
					{%- unless field.ValueRange.Min == nil or field.ValueRange.Max == nil -%}
		if({{field.Name}} < {{field.ValueRange.Min}} || {{field.Name}} > {{field.ValueRange.Max}}){
			validationErrors.{{field.Name}}Error = "{{field.Name | Capitalize | SplitCamelCase}} should be between {{field.ValueRange.Min}} and {{field.ValueRange.Max}}.";
			return false;
		}
					{%- elsif field.ValueRange.Min == nil -%}
		if({{field.Name}} > {{field.ValueRange.Max}}){
			validationErrors.{{field.Name}}Error = "{{field.Name | Capitalize | SplitCamelCase}} should not be greater than {{field.ValueRange.Max}}.";
			return false;
		}
					{%- else -%}
		if({{field.Name}} < {{field.ValueRange.Min}}){
			validationErrors.{{field.Name}}Error = "{{field.Name | Capitalize | SplitCamelCase}} should not be lower than {{field.ValueRange.Min}}.";
			return false;
		}
					{%- endunless -%}
				{%- endunless -%}
				{%- unless field.LengthRange == nil -%}
					{%- unless field.LengthRange.Min == nil or field.LengthRange.Max == nil -%}
		if({{field.Name}}.length < {{field.LengthRange.Min}} || {{field.Name}}.length > {{field.LengthRange.Max}}){
			validationErrors.{{field.Name}}Error = "{{field.Name | Capitalize | SplitCamelCase}} should have length between {{field.LengthRange.Min}} and {{field.LengthRange.Max}}.";
			return false;
		}
					{%- else -%}
		if({{field.Name}}.length > {{field.LengthRange.Max}}){
			validationErrors.{{field.Name}}Error = "{{field.Name | Capitalize | SplitCamelCase}} should not have length greater than {{field.LengthRange.Max}}.";
			return false;
		}
					{%- endunless -%}
				{%- endunless -%}
		return true;
	}
			{%- endunless -%}
		{%- endif -%}
	{%- endfor -%}
}

export default {{Params.Entity.Name}}Form;