import * as React from 'react';
import {{Params.Entity.Name}} from 'src/models/{{Params.Entity.Name}}';
import { Grid } from '@material-ui/core';
{%- for field in Params.Entity.Fields -%}
	{%- unless field.Name == 'id' -%}
		{%- unless field.Type.Name == 'boolean' -%}
import { TextField } from '@material-ui/core';
			{%- break -%}
		{%- endunless -%}
	{%- endunless -%}
{%- endfor -%}
{%- for field in Params.Entity.Fields -%}
	{%- if field.Type.Name == 'boolean' -%}
import { FormControlLabel, Checkbox } from '@material-ui/core';
		{%- break -%}
	{%- endif -%}
{%- endfor -%}
{%- for field in Params.Entity.Fields -%}
	{%- if field.Type.Name == 'Date' -%}
import * as moment from 'moment';
		{%- break -%}
	{%- endif -%}
{%- endfor -%}
{%- for field in Params.Entity.Fields -%}
	{%- if field.Relation.HasOne or field.Relation.HasMany -%}
import {{ field.Type.EntityName }}Modal from 'src/components/Modals/{{ field.Type.EntityName }}/{{ field.Type.EntityName }}Modal';
	{%- endif -%}
{%- endfor -%}
interface IProps {
    {{Params.Entity.Name | DeCapitalize}}: {{Params.Entity.Name}}
    readonly: boolean
    on{{Params.Entity.Name}}Change: ({{Params.Entity.Name | DeCapitalize}}: {{Params.Entity.Name}}) => void
}
{%- assign createState = false -%}
{%- for field in Params.Entity.Fields -%}
		{%- if field.Relation.HasOne or field.Relation.HasMany -%}
			{%- assign createState = true -%}
		{%- endif -%}
{%- endfor -%}
{%- if createState -%}
interface IState {
	{%- for field in Params.Entity.Fields -%}
		{%- if field.Relation.HasOne or field.Relation.HasMany -%}
	open{{field.Name}}Modal: boolean
		{%- endif -%}
	{%- endfor -%}
}
{%- endif -%}

class {{Params.Entity.Name}}Form extends React.Component<IProps, {%- if createState -%}IState{%-else-%}{}{%-endif -%}> {
	constructor(props: IProps) {
		super(props);
		this.state = { 
		{%- for field in Params.Entity.Fields -%}
			{%- if field.Relation.HasOne or field.Relation.HasMany -%}
			open{{field.Name}}Modal: false,
			{%- endif -%}
		{%- endfor -%}
		};
	}
    public render() {
        return (
            <Grid container={true} spacing={24}>
			{%- for field in Params.Entity.Fields -%}
				{%- if field.Relation.HasOne or field.Relation.HasMany -%}
				<{{ field.Type.EntityName }}Modal
					{%- if field.Relation.HasMany -%}
					multiple = {true}
						{%- else -%}
					multiple = {false}
					{%- endif -%}
					open={this.state.open{{ field.Name }}Modal}
					onClose={this.toggle{{ field.Name }}Modal}
					onSave={this.on{{ field.Name }}Change}
					{%- if field.Relation.HasMany -%}
					selected = {this.props.{{Params.Entity.Name | DeCapitalize}}.{{field.Name}}Ids}
						{%- else -%}
					selected = { this.props.{{Params.Entity.Name | DeCapitalize}}.{{field.Name}}Id != null ? [this.props.{{Params.Entity.Name | DeCapitalize}}.{{field.Name}}Id] : [] }
					{%- endif -%}
				/>
				{%- endif -%}
			{%- endfor -%}
			{%- assign addPlaceholder = true -%}
			{%- for field in Params.Entity.Fields -%}
				{%- unless field.Name == 'id' -%}
				{%- assign addPlaceholder = false -%}
				<Grid item={true} xs={12} sm={4}>
					{%- if field.Type.IsSimpleType -%}
						{%- if field.Type.Name == 'boolean' -%}
							<FormControlLabel
								label="{{ field.Name | SplitCamelCase | Capitalize }}"
								control={
									<Checkbox
										id="{{ field.Name | DeCapitalize }}"
										checked={this.props.{{Params.Entity.Name | DeCapitalize }}.{{ field.Name | DeCapitalize }}}
										onChange={this.on{{ field.Name }}Change}
										color="primary"
										disabled={this.props.readonly}
									/>
								}
							/>
						{%- else -%}
					<TextField
					  required={true}
					  id="{{field.Name}}"
					  name="{{field.Name | SplitCamelCase | Capitalize}}"
					  label="{{field.Name | SplitCamelCase | Capitalize}}"
						{%- if field.Type.Name == 'number' -%}
					  type="{{ field.Type.Name }}"
						{%- elsif field.Type.Name == 'Date' -%}
					  type="datetime-local" 
						{%- endif -%}
					  fullWidth={true}
						{%- if field.Type.Name == 'Date' -%}
					  value = { moment(this.props.{{Params.Entity.Name | DeCapitalize}}.{{field.Name}}).format("YYYY-MM-DDTHH:mm") }
						{%- else -%}
					  value = { this.props.{{Params.Entity.Name | DeCapitalize}}.{{field.Name}} }
						{%- endif -%}
					  disabled={this.props.readonly}
					  onChange={this.on{{ field.Name }}Change}
					/>
						{%- endif -%}
					{%- else -%}
					<TextField
					  required={true}
					  id="{{field.Name}}"
					  name="{{field.Name | SplitCamelCase | Capitalize}}"
					  label="{{field.Name | SplitCamelCase | Capitalize}}"
					  type="string"
					  fullWidth={true}
						{%- if field.Relation.HasMany -%}
					  value = {`${this.props.{{Params.Entity.Name | DeCapitalize}}.{{field.Name}}Ids.length} selected`}
						{%- else -%}
					  value = { this.props.{{Params.Entity.Name | DeCapitalize}}.{{field.Name}}Id == null ? 'Empty' : 'Item selected' }
						{%- endif -%}
					  disabled={this.props.readonly}
					  onClick={this.toggle{{field.Name}}Modal}
					/>
					{%- endif -%}
				</Grid>
				{%- endunless -%}
			{%- endfor -%}
			{%- if addPlaceholder -%}
			<div>This form is empty. Please check the input file.</div>
			{%- endif -%}
            </Grid>
        )
    }
	{%- for field in Params.Entity.Fields -%}
		{%- if field.Type.IsSimpleType -%}
			{%- unless field.Name == 'id' -%}

	private on{{field.Name}}Change = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
		const {{Params.Entity.Name | DeCapitalize}} = {...this.props.{{Params.Entity.Name | DeCapitalize}}};
		{%- if field.Type.Name == 'number' -%}
		{{Params.Entity.Name | DeCapitalize}}.{{field.Name}} = parseInt(e.target.value, 10);
		{%- elsif field.Type.Name == 'Date' -%}				 
		{{Params.Entity.Name | DeCapitalize}}.{{field.Name}} = new Date(e.target.value);
		{%- elsif field.Type.Name == 'boolean' -%}			 
		{{Params.Entity.Name | DeCapitalize}}.{{field.Name}} = !this.props.{{Params.Entity.Name | DeCapitalize}}.{{field.Name}};
		{%- else -%}										 
		{{Params.Entity.Name | DeCapitalize}}.{{field.Name}} = e.target.value;
		{%- endif -%}
		this.props.on{{Params.Entity.Name}}Change({{Params.Entity.Name | DeCapitalize}});
    }
			{%- endunless -%}
		{%- else -%}

	private toggle{{ field.Name }}Modal = () => {
		if (!this.props.readonly) {
			this.setState({ open{{ field.Name }}Modal: !this.state.open{{ field.Name }}Modal });
		}
	}

	private on{{ field.Name }}Change = (selected: number[]) => {
		const {{Params.Entity.Name | DeCapitalize}} = {...this.props.{{Params.Entity.Name | DeCapitalize}}};
		{%- if field.Relation.HasMany -%}
		{{Params.Entity.Name | DeCapitalize}}.{{ field.Name }}Ids = selected;
		{%- else -%}
		{{Params.Entity.Name | DeCapitalize}}.{{ field.Name }}Id = selected.length > 0 ? selected[0] : undefined;
		{%- endif -%}
		this.props.on{{Params.Entity.Name}}Change({{Params.Entity.Name | DeCapitalize}});
	}
		{%- endif -%}
	{%- endfor -%}
}

export default {{Params.Entity.Name}}Form;