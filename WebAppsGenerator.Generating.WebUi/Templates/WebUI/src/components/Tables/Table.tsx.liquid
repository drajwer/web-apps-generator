import * as React from 'react';
import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import { CircularProgress } from '@material-ui/core';
import * as Actions from '../../modules/{{ Params.Entity.Name | DeCapitalize }}/actions';
import GenericTable from '../GenericTable/GenericTable';
import {{ Params.Entity.Name }} from '../../models/{{ Params.Entity.Name }}';
import { IRootState } from '../../modules';
import './Table.css';

interface IStoreProps {
    {{ Params.Entity.PluralName | DeCapitalize }}: {{ Params.Entity.Name }}[] | null,
    actions: any,
    selected: {{ Params.Entity.IdField.Type.Name }}[],
	isFetching: boolean
}

interface I{{ Params.Entity.Name }}TableProps {
    showCheckboxes: boolean,
    multipleSelects: boolean,
	onSelect? : ((selected: {{ Params.Entity.IdField.Type.Name }}[]) => void);
}

type ICombinedProps = IStoreProps & I{{ Params.Entity.Name }}TableProps;

class {{ Params.Entity.Name }}Table extends React.Component<ICombinedProps> {
    public componentWillMount() {
		if (this.props.{{ Params.Entity.PluralName | DeCapitalize }} === null) {
			this.refreshData();
		}
    }
    public render() {
		const { {{ Params.Entity.PluralName | DeCapitalize }}, showCheckboxes, multipleSelects, isFetching } = this.props;
		
        if (isFetching) {
            return (
				<div className="loading-circle">
					<CircularProgress />
				</div>
				);
        }

        const data = !{{ Params.Entity.PluralName | DeCapitalize }}? null : {{ Params.Entity.PluralName | DeCapitalize }}.map(({{ Params.Entity.Name | DeCapitalize }}: {{ Params.Entity.Name }}) => ({
            {%- for field in Params.Entity.Fields -%}
				{%- if field.Type.IsSimpleType -%}
			{{ field.Name }}: {{ Params.Entity.Name | DeCapitalize }}.{{ field.Name }},
				{%- endif -%}
			{%- endfor -%}
        }));

        const tableHeadLabels = 
			[
				{%- for field in Params.Entity.Fields -%}
					{%- if field.Type.IsSimpleType -%}
				'{{ field.Name | Capitalize | SplitCamelCase }}',
					{%- endif -%}
				{%- endfor -%}
			];
		
        return (
            <GenericTable
                data={data}
                selected={this.props.selected}
                tableTitle="{{ Params.Entity.PluralName }}"
                tableHeadLabels={tableHeadLabels}
                showCheckboxes={showCheckboxes}
                multipleSelects={multipleSelects}
				onSelect={this.props.onSelect}
				onRefresh={this.refreshData}
            />
        )
    }
	
	private refreshData = () => {
		this.props.actions.get{{ Params.Entity.PluralName }}();
    }
}

const mapStateToProps = (state: IRootState, ownProps: I{{ Params.Entity.Name }}TableProps) => ({
    {{ Params.Entity.PluralName | DeCapitalize }}: state.{{ Params.Entity.Name | DeCapitalize }}.{{ Params.Entity.PluralName | DeCapitalize }},
    isFetching: state.{{ Params.Entity.Name | DeCapitalize }}.isFetching,
	...ownProps
});

const mapDispatchToProps = (dispatch: any) => ({
    actions: bindActionCreators(Actions, dispatch),
});
export default connect(mapStateToProps, mapDispatchToProps)({{ Params.Entity.Name }}Table);
