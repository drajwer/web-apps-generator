using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.EntityFrameworkCore;
using {{Params.CoreProjectName}}.Exceptions;
using {{Params.CoreProjectName}}.Interfaces;
using {{Params.CoreProjectName}}.Models;

namespace {{Params.CoreProjectName}}.Services.Generated
{
    /// <summary>
    /// Autogenerated. To modify the logic use <see cref="{{Params.Entity.Name}}CrudService"/>.
    /// </summary>
    public partial class {{Params.Entity.Name}}BaseCrudService : ICrudService<{{Params.Entity.Name}}, {{Params.Entity.IdField.Type.Name}}>
    {
        protected readonly IRepository<{{Params.Entity.Name}}, {{Params.Entity.IdField.Type.Name}}> Repo;
		protected readonly RepositorySet RepoSet;

        public {{Params.Entity.Name}}BaseCrudService(RepositorySet repoSet)
        {
            Repo = repoSet.{{Params.Entity.Name}}Repo;
			RepoSet = repoSet;
        }

        public virtual {{Params.Entity.Name}} Create({{Params.Entity.Name}} entity)
        {
			{%- for prop in Params.Entity.Fields -%}
				{%- unless prop.Relation == nil -%}
					{%- unless prop.Type.IsSimpleType -%}
			Init{{prop.Name}}(entity);
					{%- endunless -%}
				{%- endunless -%}
			{%- endfor -%}
            Repo.Create(entity);
            return Get(entity.Id);
        }

        public virtual {{Params.Entity.Name}} Get({{Params.Entity.IdField.Type.Name}} id)
        {
            return Repo.Get(id);
        }

        public virtual {{Params.Entity.Name}} GetWithChildren({{Params.Entity.IdField.Type.Name}} id)
        {
            return Repo.GetAll()
			{%- for prop in Params.Entity.Fields -%}
				{%- unless prop.Relation == nil -%}
					{%- unless prop.Type.IsSimpleType -%}
				.Include(e => e.{{prop.Name}})
					{%- endunless -%}
				{%- endunless -%}
			{%- endfor -%}
                .FirstOrDefault(e => e.Id == id);
        }

        public virtual IQueryable<{{Params.Entity.Name}}> GetAll()
        {
            return Repo.GetAll();
        }

        public virtual {{Params.Entity.Name}} Update({{Params.Entity.IdField.Type.Name}} id, {{Params.Entity.Name}} entity)
        {
            var dbEntity = GetWithChildren(id);
            if (dbEntity == null)
                throw new BadRequestException($"{{Params.Entity.Name}} with id {id} does not exists.");
			
            UpdateSimpleProperties(entity, dbEntity);
            {%- for prop in Params.Entity.Fields -%}
				{%- unless prop.Relation == nil -%}
					{%- unless prop.Type.IsSimpleType -%}
			Update{{prop.Name}}(entity, dbEntity);
					{%- endunless -%}
				{%- endunless -%}
			{%- endfor -%}

            Repo.Update(dbEntity);

            return Get(id);
        }

		public virtual void Delete({{Params.Entity.IdField.Type.Name}} id)
        {
            var entity = Get(id);
            if(entity == null)
                throw new BadRequestException($"{{Params.Entity.Name}} with id {id} does not exists.");
            Repo.Delete(entity);
        }

		{%- for prop in Params.Entity.Fields -%}
			{%- unless prop.Relation == null -%}
				{%- unless prop.Type.IsSimpleType -%}
		protected virtual void Init{{prop.Name}}({{Params.Entity.Name}} entity)
        {
            {%- if prop.Relation.HasManyWithOne -%}
			entity.{{prop.Name}} = entity.{{prop.Name}}?.Select(e => RepoSet.{{prop.Type.EntityName}}Repo.Get(e.Id)).ToList();
			{%- elsif prop.Relation.HasOneWithOne -%}
				{%- unless prop.Relation.Primary -%}
			if (entity.{{prop.Name}} == null)
                return;

            var id = entity.{{prop.Name}}.Id;
            entity.{{prop.Name}} = RepoSet.{{prop.Type.EntityName}}Repo.Get(id);
            if (entity.{{prop.Name}} == null)
                throw new BadRequestException($"{{prop.Type.EntityName | SplitCamelCase}} with id {id} not found");
				{%- endunless -%}
			{%- endif -%}
        }

				{%- endunless -%}
			{%- endunless -%}
		{%- endfor -%}

		{%- for prop in Params.Entity.Fields -%}
			{%- unless prop.Relation == nil -%}
				{%- unless prop.Type.IsSimpleType -%}
		protected virtual void Update{{prop.Name}}({{Params.Entity.Name}} entity, {{Params.Entity.Name}} dbEntity)
        {
            {%- if prop.Relation.HasManyWithMany -%}
			if (entity.{{prop.Name}} != null)
				dbEntity.{{prop.Name}} = entity.{{prop.Name}};
			{%- elsif prop.Relation.HasManyWithOne -%}
			if (entity.{{prop.Name}} == null)
				return;
            var children = entity.{{prop.Name}}?.Select(s => RepoSet.{{prop.Type.EntityName}}Repo.Get(s.Id)).ToList();
			dbEntity.{{prop.Name}} = children;
			{%- elsif prop.Relation.HasOneWithOne -%}
				{%- unless prop.Relation.Primary -%}
			if (entity.{{prop.Name}} == null)
			{
				dbEntity.{{prop.Name}} = null;
				return;
			}

            var id = entity.{{prop.Name}}.Id;
            dbEntity.{{prop.Name}} = RepoSet.{{prop.Type.EntityName}}Repo.Get(id);
            if (dbEntity.{{prop.Name}} == null)
                throw new BadRequestException($"{{prop.Type.EntityName | SplitCamelCase}} with id {id} not found");
				{%- else -%}
			dbEntity.{{prop.Name}}Id = entity.{{prop.Name}}Id;
				{%- endunless -%}
			{%- else -%}
			dbEntity.{{prop.Name}}Id = entity.{{prop.Name}}Id;
			{%- endif -%}
        }

				{%- endunless -%}
			{%- endunless -%}
		{%- endfor -%}

        protected virtual void UpdateSimpleProperties({{Params.Entity.Name}} entity, {{Params.Entity.Name}} dbEntity)
        {
			{%- for prop in Params.Entity.Fields -%}
				{%- if prop.Type.IsSimpleType and prop.Relation == nil -%}
					{%- unless prop.Name == 'Id' -%}
			dbEntity.{{prop.Name}} = entity.{{prop.Name}};
					{%- endunless -%}
				{%- endif -%}
			{%- endfor -%}
        }
    }
}
