using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using {{Params.CoreProjectName}}.Interfaces;
using {{Params.CoreProjectName}}.Models;
using Microsoft.EntityFrameworkCore;

namespace {{Params.CoreProjectName}}.Services.Generated
{
    /// <summary>
    /// Autogenerated. To modify the logic use <see cref="{{Params.Entity.Name}}CrudService"/>.
    /// </summary>
    public partial class {{Params.Entity.Name}}BaseCrudService : ICrudService<{{Params.Entity.Name}}, int>
    {
        private readonly IRepository<{{Params.Entity.Name}}, int> _repo;
        private readonly ICrudService<Book, int> _booksService;

        public {{Params.Entity.Name}}BaseCrudService(RepositorySet repoSet)
        {
            _repo = repoSet.{{Params.Entity.Name}}Repo;
        }

        public {{Params.Entity.Name}} Create({{Params.Entity.Name}} entity)
        {
			{%- for prop in Params.Entity.Fields -%}
				{%- unless prop.Relation == null -%}
					{%- unless prop.Type.IsSimpleType -%}
			Init{{prop.Name}}(entity);
					{%- endunless -%}
				{%- endunless -%}
			{%- endfor -%}
            //entity.OwnerBooks = entity.OwnerBooks.Select(e => _booksService.Get(e.Id)).ToList();
            _repo.Create(entity);
            return Get(entity.Id);
        }

        public void Delete(int id)
        {
            var entity = Get(id);
            if(entity == null)
                throw new ArgumentException($"{{Params.Entity.Name}} with id {id} does not exists.");
            _repo.Delete(entity);
        }

        public {{Params.Entity.Name}} Get(int id)
        {
            return _repo.Get(id);
        }

        public {{Params.Entity.Name}} GetWithChildren(int id)
        {
            return _repo.GetAll()
                //.Include(e => e.OwnerBooks)
                //.Include(e => e.BookPeople)
                .FirstOrDefault(e => e.Id == id);
        }

        public IQueryable<{{Params.Entity.Name}}> GetAll()
        {
            return _repo.GetAll();
        }

        public {{Params.Entity.Name}} Update(int id, {{Params.Entity.Name}} entity)
        {
            var dbEntity = GetWithChildren(id);
            if (dbEntity == null)
                throw new ArgumentException($"{{Params.Entity.Name}} with id {id} does not exists.");
			
            UpdateSimpleProperties(entity, dbEntity);
            {%- for prop in Params.Entity.Fields -%}
				{%- unless prop.Relation == null -%}
					{%- unless prop.Type.IsSimpleType -%}
			Update{{prop.Name}}(entity, dbEntity);
					{%- endunless -%}
				{%- endunless -%}
			{%- endfor -%}

            _repo.Update(dbEntity);

            return Get(id);
        }

		{%- for prop in Params.Entity.Fields -%}
			{%- unless prop.Relation == null -%}
				{%- unless prop.Type.IsSimpleType -%}

		protected virtual void Init{{prop.Name}}({{Params.Entity.Name}} entity)
        {
            
        }

				{%- endunless -%}
			{%- endunless -%}
		{%- endfor -%}

		{%- for prop in Params.Entity.Fields -%}
			{%- unless prop.Relation == null -%}
				{%- unless prop.Type.IsSimpleType -%}

		protected virtual void Update{{prop.Name}}({{Params.Entity.Name}} entity, {{Params.Entity.Name}} dbEntity)
        {
            
        }

				{%- endunless -%}
			{%- endunless -%}
		{%- endfor -%}
        //protected virtual void UpdateBookPeople({{Params.Entity.Name}} entity, {{Params.Entity.Name}} dbEntity)
        //{
        //    dbEntity.BookPeople = entity.BookPeople;
        //}
		//
        //protected virtual void UpdateOwnerBooks({{Params.Entity.Name}} entity, {{Params.Entity.Name}} dbEntity)
        //{
        //    dbEntity.OwnerBooks = dbEntity.OwnerBooks.Where(e => entity.OwnerBooks.Any(n => n.Id == e.Id)).ToList();
        //    foreach (var ownerBook in dbEntity.OwnerBooks)
        //    {
        //        if (entity.OwnerBooks.All(e => e.Id != ownerBook.Id))
        //            dbEntity.OwnerBooks.Remove(ownerBook);
        //    }
		//
        //    var ownerBooks = entity.OwnerBooks.Select(s => _booksService.Get(s.Id)).ToList();
        //    foreach (var ownerBook in ownerBooks)
        //    {
        //        ownerBook.OwnerId = dbEntity.Id;
        //    }
        //}

        protected virtual void UpdateSimpleProperties({{Params.Entity.Name}} entity, {{Params.Entity.Name}} dbEntity)
        {
			{%- for prop in Params.Entity.Fields -%}
				{%- if prop.Type.IsSimpleType -%}
					{%- unless prop.Name == 'Id' -%}
			dbEntity.{{prop.Name}} = entity.{{prop.Name}};
					{%- endunless -%}
				{%- endif -%}
			{%- endfor -%}
        }
    }
}
