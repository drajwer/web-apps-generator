using System.Linq;
using Microsoft.EntityFrameworkCore;
using {{Params.CoreProjectName}}.Interfaces;

namespace {{Params.CoreProjectName}}.Context
{
    public partial class DbRepository<T, TId> : IRepository<T, TId> where T : class
    {
        private readonly DbSet<T> _dbSet;
        private readonly AppDbContext _dbContext;

        public DbRepository(AppDbContext dbContext)
        {
            _dbSet = dbContext.Set<T>();
            _dbContext = dbContext;
        }

        public IQueryable<T> GetAll()
        {
            return _dbSet.AsQueryable();
        }

        public T Get(TId id)
        {
            return _dbSet.Find(id);
        }

		public T Create(T entity)
        {
            _dbSet.Add(entity);
            _dbContext.SaveChanges();
            return entity;
        }

        public void Update(T entity)
        {
            _dbSet.Update(entity);
            _dbContext.SaveChanges();
        }

        public void Delete(T entity)
        {
            _dbSet.Remove(entity);
            _dbContext.SaveChanges();
        }
    }
}
