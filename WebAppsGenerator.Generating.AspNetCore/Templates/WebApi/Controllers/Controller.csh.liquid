using System.Linq;
using Microsoft.AspNetCore.Mvc;
using {{Params.CoreProjectName}}.Models;
using {{Params.CoreProjectName}}.Interfaces;
using {{Params.WebApiProjectName}}.ViewModels;

namespace {{Params.WebApiProjectName}}.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class {{Params.Entity.PluralName}}Controller : ControllerBase
    {
        private readonly ICrudService<{{Params.Entity.Name}}, {{Params.Entity.IdField.Type.Name}}> _service;
		private readonly ITransactionScopeFactory _scopeFactory;

        public {{Params.Entity.PluralName}}Controller(ICrudService<{{Params.Entity.Name}}, {{Params.Entity.IdField.Type.Name}}> service, ITransactionScopeFactory scopeFactory)
        {
            _service = service;
            _scopeFactory = scopeFactory;
        }

		/// <summary>
        /// Returns all {{ Params.Entity.PluralName | SplitCamelCase }}.
        /// </summary>
        /// <returns>Array with all {{ Params.Entity.PluralName | SplitCamelCase }}</returns>
        /// <response code="200">Array with all {{ Params.Entity.PluralName | SplitCamelCase }}</response>
		[HttpGet] // GET api/{{ Params.Entity.PluralName | Downcase }}
        [ProducesResponseType(typeof({{Params.Entity.Name}}ViewModel[]), 200)]
        public IActionResult Get()
        {
            var entities = _service.GetAll();
            var viewModels = entities.Select(e => new {{Params.Entity.Name}}ViewModel(e));
            return new JsonResult(viewModels);
        }
		/// <summary>
        /// Returns {{ Params.Entity.Name | SplitCamelCase }} with specified id.
        /// </summary>
        /// <param name="id">Id of the {{ Params.Entity.Name | SplitCamelCase }}</param>
        /// <returns>Requested {{ Params.Entity.Name | SplitCamelCase }}</returns>
        /// <response code="200">Returns requested {{ Params.Entity.Name | SplitCamelCase }}</response>
        /// <response code="404">If {{ Params.Entity.Name | SplitCamelCase }} with given id does not exist</response>
        [HttpGet("{id}")] // GET api/{{ Params.Entity.PluralName | Downcase }}/{%- if Params.Entity.IdField.Type.Name == 'int' -%}5{%- else -%}some-string-id{%- endif %}
        [ProducesResponseType(typeof({{Params.Entity.Name}}ViewModel), 200)]
        [ProducesResponseType(404)]
        public IActionResult Get({{Params.Entity.IdField.Type.Name}} id)
        {
            var entity = _service.GetWithChildren(id);
            if(entity == null)
                return new NotFoundResult();
            var viewModel = new {{Params.Entity.Name}}ViewModel(entity);
            return new JsonResult(viewModel);
        }

		/// <summary>
        /// Creates {{ Params.Entity.Name | SplitCamelCase }}.
        /// </summary>
        /// <param name="value">{{Params.Entity.Name}} to add</param>
        /// <returns>The newly created item</returns>
        /// <response code="200">Returns the newly created item</response>
        [HttpPost] // POST api/{{ Params.Entity.PluralName | SplitCamelCase }}
        [ProducesResponseType(typeof({{Params.Entity.Name}}ViewModel), 200)]
        public IActionResult Post([FromBody] {{Params.Entity.Name}}ViewModel value)
        {
			using (var tran = _scopeFactory.BeginTransaction())
            {
				var entity = value.CreateModel();
				var returned = _service.Create(entity);
				var viewModel = new {{Params.Entity.Name}}ViewModel(returned);
                tran.Commit();
				
				return new JsonResult(viewModel);
			}
        }

		/// <summary>
        /// Updates {{ Params.Entity.Name | SplitCamelCase }} with specified id.
        /// </summary>
        /// <param name="id">Id of modified {{ Params.Entity.Name | SplitCamelCase }}</param>
        /// <param name="value">{{Params.Entity.Name}} that should replace the old version</param>
        /// <returns>Requested {{ Params.Entity.Name | SplitCamelCase }}</returns>
        /// <response code="200">Returns the updated item</response>
		[HttpPut("{id}")] // PUT api/{{ Params.Entity.PluralName | Downcase }}/{%- if Params.Entity.IdField.Type.Name == 'int' -%}5{%- else -%}some-string-id{%- endif %}
        [ProducesResponseType(typeof({{Params.Entity.Name}}ViewModel), 200)]
        public IActionResult Put({{Params.Entity.IdField.Type.Name}} id, [FromBody] {{Params.Entity.Name}}ViewModel value)
        {
			using (var tran = _scopeFactory.BeginTransaction())
            {
				var entity = value.CreateModel();
				var returned = _service.Update(id, entity);
				var viewModel = new {{Params.Entity.Name}}ViewModel(returned);
                tran.Commit();
				
				return new JsonResult(viewModel);
			}
        }

		/// <summary>
        /// Deletes {{ Params.Entity.Name | SplitCamelCase }} with specified id.
        /// </summary>
        /// <param name="id">Id of deleted {{ Params.Entity.Name | SplitCamelCase }}</param>
        /// <returns>Id of deleted {{ Params.Entity.Name | SplitCamelCase }}</returns>
        /// <response code="200">Returns id of deleted {{ Params.Entity.Name | SplitCamelCase }}</response>
        [HttpDelete("{id}")] // DELETE api/{{ Params.Entity.PluralName | Downcase }}/{%- if Params.Entity.IdField.Type.Name == 'int' -%}5{%- else -%}some-string-id{%- endif %}
        [ProducesResponseType(typeof({{Params.Entity.IdField.Type.Name}}),200)]
        public IActionResult Delete({{Params.Entity.IdField.Type.Name}} id)
        {
			using (var tran = _scopeFactory.BeginTransaction())
            {
				_service.Delete(id);
                tran.Commit();
				
				return new JsonResult(id);
			}
        }
    }
}
