using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using {{Params.CoreProjectName}}.Context;
using {{Params.WebApiProjectName}}.Extensions;
using {{Params.WebApiProjectName}}.Middlewares;

namespace {{Params.WebApiProjectName}}
{
    public class Startup
    {
		private const string DevPolicyName = "Development";

        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {	
			services.AddCors(o => o.AddPolicy(DevPolicyName, builder =>
            {
                builder.AllowAnyOrigin()
                    .AllowAnyMethod()
                    .AllowAnyHeader();
            }));

            services.AddDbContext<AppDbContext>(options =>
                options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));

            services.AddDbServices();
            services.AddGeneratedCrudServices();

			services.AddSwagger();

            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseHsts();
            }

            app.UseCors(DevPolicyName);
            app.UseHttpsRedirection();
            app.UseMiddleware<BusinessExceptionMiddleware>();

            app.UseSwaggerWithUi();
            app.UseMvc();
        }
    }
}
